<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackieMa&#39;s Blog</title>
  
  <subtitle>Come On!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-03T13:13:51.459Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jackie Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android下实现局域网设备发现与通信</title>
    <link href="http://yoursite.com/2020/06/03/Android%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2020/06/03/Android下实现局域网设备发现与通信/</id>
    <published>2020-06-03T13:11:54.000Z</published>
    <updated>2020-06-03T13:13:51.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在使用Android开发智能设备时，一般会分为用于遥控与管理的Host端，和用于执行个性功能的Slave端，二者可以借助网络或蓝牙等途径实现通信。</p><p>协议：计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议。</p><p>本文介绍的就是网络通信。（类似应用商城里的 电视超人 app）</p><a id="more"></a><h2 id="前提条件-ip-地址"><a href="#前提条件-ip-地址" class="headerlink" title="前提条件: ip 地址"></a>前提条件: ip 地址</h2><p>借助网络通信，就需要知道对方的 ip 地址，而常见的网络环境中的 ip 地址一般都是通过 DHCP 服务动态分配的， 所以事先没法知道对方的 ip。</p><h2 id="查询对方-ip-地址"><a href="#查询对方-ip-地址" class="headerlink" title="查询对方 ip 地址"></a>查询对方 ip 地址</h2><p>为了确认对方的地址， 可以通过向局域网内发送查找设备的广播，收到广播的 Slave 端就知道了 Host 的 ip 地址，在向 Host 端发送应答包后，双方就都知道了对方的 ip。</p><h2 id="局域网设备的通信"><a href="#局域网设备的通信" class="headerlink" title="局域网设备的通信"></a>局域网设备的通信</h2><p>在 Host 端和 Slave 端互相知道 ip 地址后，就可以事先局域网通信了。<br>局域网通信一般都是通过 TCP 或 UDP 实现。 </p><table><thead><tr><th>功能点</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>可靠性</td><td>数据不丢失、无差错、不重复、按序到达</td><td>可能会丢包或者顺序错乱</td></tr><tr><td>效率</td><td>支持一对一</td><td>支持一对一、一对多、多对一、多对多</td></tr></tbody></table><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>《基于Android热点的局域网UDP广播，部分手机收不到UDP报文的问题》： <a href="https://blog.csdn.net/qq_27331979/article/details/50379683" target="_blank" rel="noopener">https://blog.csdn.net/qq_27331979/article/details/50379683</a></p><h2 id="UDP报文的发送和接收"><a href="#UDP报文的发送和接收" class="headerlink" title="UDP报文的发送和接收"></a>UDP报文的发送和接收</h2><p>Slave 端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">class SearchRespThread : Thread() &#123;</span><br><span class="line">    var socket : DatagramSocket? = <span class="keyword">null</span></span><br><span class="line">    var openFlag = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        socket?.let &#123;</span><br><span class="line">            it.close()</span><br><span class="line">            socket = <span class="keyword">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        openFlag = <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//指定接收数据包的端口</span></span><br><span class="line">            socket = DatagramSocket(RemoteConst.DEVICE_SEARCH_PORT)</span><br><span class="line">            val buf = ByteArray(<span class="number">1024</span>)</span><br><span class="line">            val recePacket = DatagramPacket(buf, buf.size)</span><br><span class="line">            openFlag = <span class="keyword">true</span></span><br><span class="line">            <span class="keyword">while</span> (openFlag) &#123;</span><br><span class="line">                socket!!.receive(recePacket)</span><br><span class="line">                <span class="comment">//校验数据包是否是搜索包</span></span><br><span class="line">                <span class="keyword">if</span> (verifySearchData(recePacket)) &#123;</span><br><span class="line">                    <span class="comment">//发送搜索应答包</span></span><br><span class="line">                    val sendData: ByteArray = packSearchRespData()</span><br><span class="line">                    val sendPack = DatagramPacket(</span><br><span class="line">                        sendData,</span><br><span class="line">                        sendData.size,</span><br><span class="line">                        recePacket.socketAddress</span><br><span class="line">                    )</span><br><span class="line">                    socket!!.send(sendPack)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">            destory()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 生成搜索应答数据</span></span><br><span class="line"><span class="comment">        * 协议：$(1) + packType(1) + sendSeq(4) + dataLen(1) + [data]</span></span><br><span class="line"><span class="comment">        * packType - 报文类型</span></span><br><span class="line"><span class="comment">        * sendSeq - 发送序列</span></span><br><span class="line"><span class="comment">        * dataLen - 数据长度</span></span><br><span class="line"><span class="comment">        * data - 数据内容</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> fun <span class="title">packSearchRespData</span><span class="params">()</span>: ByteArray </span>&#123;</span><br><span class="line">        val data = ByteArray(<span class="number">1024</span>)</span><br><span class="line">        var offset = <span class="number">0</span></span><br><span class="line">        data[offset++] = RemoteConst.PACKET_PREFIX.toByte()</span><br><span class="line">        data[offset++] = RemoteConst.PACKET_TYPE_SEARCH_DEVICE_RSP.toByte()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加UUID数据</span></span><br><span class="line">        val uuid = getUuidData()</span><br><span class="line">        data[offset++] = uuid.size.toByte()</span><br><span class="line">        System.arraycopy(uuid, <span class="number">0</span>, data, offset, uuid.size)</span><br><span class="line">        offset += uuid.size</span><br><span class="line">        val retVal = ByteArray(offset)</span><br><span class="line">        System.arraycopy(data, <span class="number">0</span>, retVal, <span class="number">0</span>, offset)</span><br><span class="line">        <span class="keyword">return</span> retVal</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 校验搜索数据是否符合协议规范</span></span><br><span class="line"><span class="comment">        * 协议：$(1) + packType(1) + sendSeq(4) + dataLen(1) + [data]</span></span><br><span class="line"><span class="comment">        * packType - 报文类型</span></span><br><span class="line"><span class="comment">        * sendSeq - 发送序列</span></span><br><span class="line"><span class="comment">        * dataLen - 数据长度</span></span><br><span class="line"><span class="comment">        * data - 数据内容</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> fun <span class="title">verifySearchData</span><span class="params">(pack: DatagramPacket)</span>: Boolean </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pack.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        val data = pack.data</span><br><span class="line">        var offset = pack.offset</span><br><span class="line">        var sendSeq: Int</span><br><span class="line">        <span class="keyword">if</span> (data[offset++].toInt() != <span class="string">'$'</span>.toInt() || data[offset++].toInt() != RemoteConst.PACKET_TYPE_SEARCH_DEVICE_REQ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        sendSeq = data[offset++].toInt() and <span class="number">0xFF</span></span><br><span class="line">        sendSeq = <span class="function">sendSeq <span class="title">or</span> <span class="params">(data[offset++].toInt()</span> shl 8 and 0xFF00)</span></span><br><span class="line"><span class="function">        sendSeq </span>= <span class="function">sendSeq <span class="title">or</span> <span class="params">(data[offset++].toInt()</span> shl 16 and 0xFF0000)</span></span><br><span class="line"><span class="function">        sendSeq </span>= <span class="function">sendSeq <span class="title">or</span> <span class="params">(data[offset++].toInt()</span> shl 24 and -0x1000000)</span></span><br><span class="line"><span class="function">        return !<span class="params">(sendSeq &lt; <span class="number">1</span> || sendSeq &gt; RemoteConst.SEARCH_DEVICE_TIMES)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">        * 获取设备uuid</span></span></span><br><span class="line"><span class="function"><span class="comment">        * @return</span></span></span><br><span class="line"><span class="function"><span class="comment">        */</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> fun <span class="title">getUuidData</span><span class="params">()</span>: ByteArray </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Build.PRODUCT + Build.ID).toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Host 端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviceSearcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        <span class="keyword">private</span> val executorService = Executors.newSingleThreadExecutor()</span><br><span class="line">        val uiHandler = Handler(Looper.getMainLooper())</span><br><span class="line"></span><br><span class="line">        <span class="function">fun <span class="title">search</span><span class="params">(onSearchListener: OnSearchListener)</span> </span>&#123;</span><br><span class="line">            executorService.execute(SearchRunnable(onSearchListener))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnSearchListener</span> </span>&#123;</span><br><span class="line">        <span class="function">fun <span class="title">onSearchStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        fun <span class="title">onSearchedOne</span><span class="params">(device: Device)</span></span></span><br><span class="line"><span class="function">        fun <span class="title">onSearchFinish</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    class <span class="title">SearchRunnable</span><span class="params">(<span class="keyword">private</span> val onSearchListener: OnSearchListener)</span> : Runnable </span>&#123;</span><br><span class="line">        <span class="function">override fun <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                uiHandler.post &#123; onSearchListener.onSearchStart() &#125;</span><br><span class="line">                val socket = DatagramSocket()</span><br><span class="line">                <span class="comment">//设置接收等待时长</span></span><br><span class="line">                socket.soTimeout = RemoteConst.RECEIVE_TIME_OUT</span><br><span class="line">                val sendData = ByteArray(<span class="number">1024</span>)</span><br><span class="line">                val receData = ByteArray(<span class="number">1024</span>)</span><br><span class="line">                val recePack = DatagramPacket(sendData, receData.size)</span><br><span class="line">                <span class="comment">//使用广播形式（目标地址设为255.255.255.255）的udp数据包</span></span><br><span class="line">                val sendPacket = DatagramPacket(sendData, sendData.size, InetAddress.getByName(<span class="string">"192.168.43.255"</span>), RemoteConst.DEVICE_SEARCH_PORT)</span><br><span class="line">                <span class="comment">//用于存放已经应答的设备</span></span><br><span class="line">                val devices = HashMap&lt;String, Device&gt;()</span><br><span class="line">                <span class="comment">// 搜索指定次数</span></span><br><span class="line">                <span class="keyword">for</span> (index in <span class="number">0</span> until RemoteConst.SEARCH_DEVICE_TIMES) &#123;</span><br><span class="line">                    sendPacket.data = packSearchData(index + <span class="number">1</span>)</span><br><span class="line">                    <span class="comment">// 发送udp数据包</span></span><br><span class="line">                    socket.send(sendPacket)</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//限定搜索设备的最大数量</span></span><br><span class="line">                        var rspCount = RemoteConst.SEARCH_DEVICE_MAX</span><br><span class="line">                        <span class="keyword">while</span> (rspCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            socket.receive(recePack)</span><br><span class="line">                            val device = parseRespData(recePack)</span><br><span class="line">                            device?.let &#123; device -&gt;</span><br><span class="line">                                <span class="keyword">if</span> (!devices.containsKey(device.ip)) &#123;</span><br><span class="line">                                    <span class="comment">//保存新应答的设备</span></span><br><span class="line">                                    devices[device.ip] = device</span><br><span class="line">                                    uiHandler.post &#123; onSearchListener.onSearchedOne(device) &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            rspCount--</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e: SocketTimeoutException) &#123;</span><br><span class="line">                        e.printStackTrace()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                socket.close()</span><br><span class="line">                uiHandler.post &#123; onSearchListener.onSearchFinish() &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成搜索数据包</span></span><br><span class="line"><span class="comment">         * 格式：$(1) + packType(1) + sendSeq(4) + dataLen(1) + [data]</span></span><br><span class="line"><span class="comment">         * packType - 报文类型</span></span><br><span class="line"><span class="comment">         * sendSeq - 发送序列</span></span><br><span class="line"><span class="comment">         * dataLen - 数据长度</span></span><br><span class="line"><span class="comment">         * data - 数据内容</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> seq</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> fun <span class="title">packSearchData</span><span class="params">(seq: Int)</span>: ByteArray? </span>&#123;</span><br><span class="line">            val data = ByteArray(<span class="number">6</span>)</span><br><span class="line">            var offset = <span class="number">0</span></span><br><span class="line">            data[offset++] = RemoteConst.PACKET_PREFIX.toByte()</span><br><span class="line">            data[offset++] = RemoteConst.PACKET_TYPE_SEARCH_DEVICE_REQ.toByte()</span><br><span class="line">            data[offset++] = seq.toByte()</span><br><span class="line">            data[offset++] = (seq shr <span class="number">8</span>).toByte()</span><br><span class="line">            data[offset++] = (seq shr <span class="number">16</span>).toByte()</span><br><span class="line">            data[offset++] = (seq shr <span class="number">24</span>).toByte()</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 校验和解析应答的数据包</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> pack udp数据包</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> fun <span class="title">parseRespData</span><span class="params">(pack: DatagramPacket)</span>: Device? </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pack.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            val data = pack.data</span><br><span class="line">            var offset = pack.offset</span><br><span class="line">            <span class="comment">//检验数据包格式是否符合要求</span></span><br><span class="line">            <span class="keyword">if</span> (data[offset++].toInt() != RemoteConst.PACKET_PREFIX || data[offset++].toInt() != RemoteConst.PACKET_TYPE_SEARCH_DEVICE_RSP) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            val length: Int = data[offset++].toInt()</span><br><span class="line">            val uuid = String(data, offset, length)</span><br><span class="line">            <span class="keyword">return</span> Device(pack.address.hostAddress, pack.port, uuid, <span class="keyword">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Socket-通信"><a href="#Socket-通信" class="headerlink" title="Socket 通信"></a>Socket 通信</h2><p>Client 端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mExecutorService.execute(ConnectService())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">disConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mExecutorService.execute(SendService(<span class="string">"断开"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">send</span><span class="params">(type: String)</span> </span>&#123;</span><br><span class="line">    mExecutorService.execute(SendService(type))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private inner class ConnectService : Runnable &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            val socket = Socket(host, PORT)</span><br><span class="line">            socket.soTimeout = <span class="number">60000</span></span><br><span class="line">            printWriter = PrintWriter(BufferedWriter(OutputStreamWriter(</span><br><span class="line">                    socket.getOutputStream(), <span class="string">"UTF-8"</span>)), <span class="keyword">true</span>)</span><br><span class="line">            bufferedReader = BufferedReader(InputStreamReader(socket.getInputStream(), <span class="string">"UTF-8"</span>))</span><br><span class="line">            receiveMsg()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            isConnected = <span class="keyword">false</span></span><br><span class="line">            Log.e(<span class="string">"===="</span>, <span class="string">"Socket对象获取失败:"</span> + e.message)</span><br><span class="line">            runOnUiThread &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="meta">@MainActivity</span>, <span class="string">"连接失败"</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> inner class <span class="title">SendService</span><span class="params">(val type: String)</span> : Runnable </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isConnected) &#123;</span><br><span class="line">            runOnUiThread &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="meta">@MainActivity</span>, <span class="string">"未连接"</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printWriter?.println(type)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">receiveMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            var receiveMsg = bufferedReader?.readLine() ?: <span class="string">""</span></span><br><span class="line">            <span class="keyword">if</span> (receiveMsg.isNotEmpty()) &#123;</span><br><span class="line">                Log.e(<span class="string">"===="</span>, <span class="string">"receiveMsg: $receiveMsg"</span>)</span><br><span class="line">                <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"成功连接服务器"</span>)) &#123;</span><br><span class="line">                    isConnected = <span class="keyword">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"服务端断开连接"</span>)) &#123;</span><br><span class="line">                    isConnected = <span class="keyword">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                runOnUiThread &#123;</span><br><span class="line">                    btnConnect.setImageDrawable(getDrawable(<span class="keyword">if</span> (isConnected) R.drawable.power_on <span class="keyword">else</span> R.drawable.power_off))</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="keyword">if</span> (isConnected) <span class="string">"已连接"</span> <span class="keyword">else</span> <span class="string">"断开连接"</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Server 端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TAG SERVER"</span>;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService mExecutorService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    server = <span class="keyword">new</span> ServerSocket(PORT);</span><br><span class="line">                    mExecutorService = Executors.newCachedThreadPool();</span><br><span class="line">                    Log.d(TAG, <span class="string">"服务器已启动..."</span>);</span><br><span class="line">                    Socket client;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        client = server.accept();</span><br><span class="line">                        mExecutorService.execute(<span class="keyword">new</span> Service(client));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line">        <span class="keyword">private</span> BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Service(Socket socket) &#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                printWriter = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream(), <span class="string">"UTF-8"</span>)), <span class="keyword">true</span>);</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                        socket.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">                printWriter.println(<span class="string">"成功连接服务器"</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">"成功连接服务器"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    String receiveMsg;</span><br><span class="line">                    <span class="keyword">if</span> ((receiveMsg = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"receiveMsg:"</span> + receiveMsg);</span><br><span class="line">                        <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"断开"</span>)) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"客户端请求断开连接"</span>);</span><br><span class="line">                            printWriter.println(<span class="string">"服务端断开连接"</span>);</span><br><span class="line">                            bufferedReader.close();</span><br><span class="line">                            socket.close();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">int</span> keyCode = -<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"上"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">19</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"下"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">20</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"左"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">21</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"右"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">22</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"确定"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">23</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"返回"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">4</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"提高音量"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">24</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (receiveMsg.equals(<span class="string">"降低音量"</span>)) &#123;</span><br><span class="line">                                keyCode = <span class="number">25</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Instrumentation mInst = <span class="keyword">new</span> Instrumentation();</span><br><span class="line">                            mInst.sendKeyDownUpSync(keyCode);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在使用Android开发智能设备时，一般会分为用于遥控与管理的Host端，和用于执行个性功能的Slave端，二者可以借助网络或蓝牙等途径实现通信。&lt;/p&gt;
&lt;p&gt;协议：计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议。&lt;/p&gt;
&lt;p&gt;本文介绍的就是网络通信。（类似应用商城里的 电视超人 app）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="局域网" scheme="http://yoursite.com/tags/%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    
      <category term="udp" scheme="http://yoursite.com/tags/udp/"/>
    
      <category term="协议" scheme="http://yoursite.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>《大话设计模式》之总结</title>
    <link href="http://yoursite.com/2020/05/20/%E3%80%8A%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E4%B9%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/05/20/《大话设计模式》之总结/</id>
    <published>2020-05-20T14:47:17.000Z</published>
    <updated>2020-07-02T15:51:32.283Z</updated>
    
    <content type="html"><![CDATA[<ol><li>对象: 用一组可识别的特性和行为来标识的实体;<br> 类: 具有享用属性和功能的对象的抽象的集合;<br> 属性: 一个方法或一对方法,有 get()\set()调用;<br> 字段: 与类相关的变量, 通常是私有的;</li><li>封装:<pre><code>每个对象都包含它能进行操作所需要的所有信息.一般无需对外界公开的方法都应该设置成 private, 这才有利于&quot;封装&quot;.优点:    - 减少耦合    - 类内部的实现可以自由地修改    - 类具有清晰的对外接口PS: 房子, 门</code></pre></li><li>继承:<pre><code>- 子类拥有父类非 private 的属性和功能- 子类具有自己的属性和功能, 即子类可以扩展父类没有的属性和功能- 子类可以重写父类的方法构造方法不能被继承,只能被调用.优点: - 使得所有子类公共的部分都放在了父类, 使得代码得到了共享, 避免重复      - 可使得修改或扩展继承而来的实现都比较容易缺点: - 父类变, 则子类不得不变      - 会破坏包装, 父类实现细节暴露给子类使用场景: 两个类之间是 &quot;is-a&quot; 的关系PS: 动物 - 猫\狗</code></pre></li><li><p>多态:</p><pre><code>注意:    - 子类以父类的身份出现    - 子类在工作时以自己的方式来实现    - 子类以父亲的身份出现时, 子类特有的属性和方法不可以使用    PS: 京剧, 儿子替生病的父亲上台唱戏使用: 为了使子类的实例完全解体来自父类的类成员, 父类需要将该成员声明称抽象的.实现: 对象的声明必须是父类, 而不是子类, 实例化的对象是子类, 这才能实现多态.原理: 当方法被调用时, 无论对象是否被转换为其父类, 都只有位于对象继承链最末端的方法实现才会被调用.也就是说, 抽象方法是按照其运行时类型而非编译时类型进行动态绑定调用的.</code></pre></li><li><p>抽象类:</p><pre><code>注意:    - 抽象类不能实例化    - 抽象方法时必须被子类重写的    - 如果类中包含抽象方法, 那么这个类就必须定义为抽象类让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据.一个继承关系形成的等级结构里面, 树叶节点应当是具体类, 树枝节点均应该是抽象类.</code></pre></li><li>接口:<pre><code>把隐式公共方法和属性结合起来, 以封装特定功能的一个集合.一旦类实现了接口, 类就可以支持接口所指定的所有属性和成员.声明接口在语法上与声明抽象类完全相同, 但不允许提供接口中任何成员的执行方式.实现接口的类必须要实现接口中的所有方法和属性.一个类可以支持多个接口, 多个类也可以支持相同的接口.PS: 叮当猫和孙悟空都会变出东西, 两个不相干的类, 都实现了&quot;变出东西&quot;这样的接口, 再利用接口的多态性, 完成两个不同对象不可能完成的&quot;变出东西&quot;.</code></pre></li><li>抽象类和接口的区别:<ul><li>类是对对象的抽象; 抽象类是对类的抽象; 接口是对行为的抽象</li><li>如果行为跨越不同类的对象, 可使用接口; 对于一些相似的类对象, 用继承抽象类</li><li>从设计角度讲, 抽象类是子类中发现了公共的东西, 泛化出了父类, 然后子类继承父类; 而接口是跟不知子类的存在, 方法如何实现不确定, 预先定义 (PS: 猫 -&gt; 动物; 动物策划方商量飞得最远等行为)</li></ul></li><li>面向对象的好处:<ul><li>可维护</li><li>可复用</li><li>可扩展</li><li>灵活性好</li></ul></li><li>简单工厂模式<pre><code>面对的问题: 结合计算器加减乘除为例, 到底要实例化谁, 将来会不会增加实例化的对象, 这是很容易变化的地方思考解决过程: 考虑用一个单独的类来做这个创造实例的过程, 这就是工厂最终解决方案: 在工厂中实例化合适的对象, 通过多态, 返回父类的方式实现具体实现: 在工厂内根据客户给的参数, 实例化合适对象, 最终将该对象以父类的方式返回给客户. (就是多态的实现)</code></pre></li><li>策略模式<pre><code>面对的问题: 结合商场收银促销例子, 打折、返利都是算法, 用工厂生成算法对象没问题,但是算法本身就是一中策略, 最重要的事这些算法是随时可能互相替换的, 这就是变化点思考过程: 客户不关心具体的算法细节, 只需要知道是哪种算法, 及结果; 所以将具体算法的实例化和客户做隔离.最终解决方案: 定义好算法对象, 封装起来(变化点), 让他们之间可以相互替换, 从而不影响算法的客户具体实现: 定义一个 Context 类, 类中维护一个算法父类的引用, 构造函数中得到这个引用对象, 暴露一个接口即该引用的获得结果的方法PS: 可以将简单工厂模式和策略模式相结合, 用在策略模式的构造函数中, 这样就可以是具体算法和客户做隔离特点: - 策略模式就是封装算法的, 定义的 Context 为这些算法抽取了一系列可供重用的算法或行为, 减少了中算法之间的耦合;     - 同时, 策略模式结合了简单工厂模式, 可以将具体算法的实现交给 Context, 从而减轻了客户端的职责简单工厂模式和策略模式使用的区别:        - 简单工厂模式, Factory 创建算法实例是静态方法; 策略模式, Context 是在构造函数中传进来具体算法实例        - 简单工厂模式,Factory 内部不持有算法实例, 只是根据外部传进来的参数, 创建具体的算法实例并传给调用者, 由调用者持有这个算法实例; 策略模式, Context 内部持有算法实例, 调用者创建但不持有具体的实例, 而是传给 Context 内部        - 简单工厂模式, 调用者直接调用算法实例的方法; 策略模式, 调用者调用的是 Context 的实例方法, 在 Context 的实例方法中调用的是算法实例的方法</code></pre></li><li>单一职责原则<pre><code>概念: 就一个类而言, 应该仅有一个引起它变化的原因原因: 如果一个类承担的职责过多, 就等一把这些职责耦合在一起, 一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力. 当发生变化时, 设计会遭受意想不到的破坏.实现: 软件设计真正要做的许多内容, 就是发现职责并把哪些职责相互分离.优点: 易维护、易扩展、易复用、灵活多样PS: 手机没拍摄到 UFO</code></pre></li><li>开放-封闭原则<pre><code>概念: 软件实体应该是可以扩展的, 但是不能修改实现: 设计时猜测出最优可能发生的变化种类, 然后构造抽象来隔离那些变化.PS: 计算器</code></pre></li><li>依赖倒置原则<pre><code>概念: - 高层模块不应该依赖低层模块, 两个都应该依赖抽象      - 抽象不应该依赖细节, 细节应该依赖抽象PS: CPU\主板 不互相依赖, 只依赖接口; 简单工厂类与分支耦合, 所以抽象出一个创造抽象产品的工厂方法.</code></pre></li><li>里氏代换原则<pre><code>概念: 子类型必须能替换掉它们的父类型 (把父类都替换成它的子类, 程序的行为没有变化)        只有当子类可以替换掉父类, 软件对象的功能不受到影响时, 父类才能真正被复用, 而子类也能够在父类的基础上增加新的行为.        正是由于子类型的可替换性才使得父类类型的模块在无需修改的情况下就可以扩展.PS: 企鹅不会飞不能继承鸟, 猫是动物的一种</code></pre></li><li>装饰模式<pre><code>概念: 动态地给一个对象添加一些额外的职责, 就增加功能来说, 装饰模式比生成子类更加灵活 (简单来说, 就是把所需的功能按照正确的顺序串联起来进行控制)实现: 先定义一个 Component 对象接口, 可以给这些对象动态地添加职责; 再通过定义 Decorator 类, 持有 Component 对象, 定义属于它的接口实现方法并调用 Component 对象的接口, 最终通过继承 Decorator 类类实现对 Component 类的扩展.面对的问题: 往一个旧的类中添加新的代码, 这些新的代码通常装饰了原有类的核心职责或主要方法行为, 它会在主类中加入新的字段、新的方法、新的逻辑, 从而增加了主类的复杂度, 然而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要. 通过装饰模式解决, 它把每个需要装饰的功能放在单独的类中, 并让这个类包装它所要装饰的对象, 当需要执行特殊行为时, 客户代码就可以有选择地使用装饰包装功能包装对象了.优点: 将类中的装饰功能区分开来了, 并且去除相关类中重复的装饰逻辑.</code></pre></li><li>代理模式<pre><code>定义: 通过代理来访问对象的函数实现: 定义代理和对象的通用接口, 代理和对象分别实现该接口; 代理中初始化并持有该对象, 再使用对象的地方, 使用代理, 最终在代理中真正实现的是该对象的方法.优点: 可以将对象生成实例的处理等耗时操作推迟到实际调用方法时再进行, 通过设置代理人的方式, 减轻本人的工作负担.</code></pre></li><li>工厂方法模式<pre><code>定义: 定义一个用于创建对象的接口, 让子类决定实例化哪一个类, 工厂方法使一个类的实例化延迟到其子类.对比简单工厂模式: 简单工厂模式最大优点在于工厂类中包含了必要的逻辑判断, 根据客户端的选择条件动态实例化相关的类, 对于客户端来说, 去除了与具体产品的依赖; 但是如果给工厂类添加新的case, 就违背了 开放-封闭原则, 因此产生了工厂方法模式.</code></pre></li><li>原型模式<pre><code>定义: 用原型实例指定创建对象的种类, 并且通过拷贝这些原型创建新的对象.使用前提: 一般是在初始化的信息不发生变化的情况下.优点: 既隐藏了对象创建的细节, 又对性能是大大的提高.PS: clone()</code></pre></li><li>模板方法模式<pre><code>模板方法: 当我们要完成在某一细节层次一致的一个过程或一系列步骤, 但其个别步骤在更详细的层次上的实现可能不同时, 通常考虑用模板方法来处理.定义: 定义一个算法中的算法的骨架, 将一些步骤延迟到子类.优点: 把不变的行为搬移到父类, 去除子类中的重复代码.</code></pre></li><li>迪米特法则: </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;对象: 用一组可识别的特性和行为来标识的实体;&lt;br&gt; 类: 具有享用属性和功能的对象的抽象的集合;&lt;br&gt; 属性: 一个方法或一对方法,有 get()\set()调用;&lt;br&gt; 字段: 与类相关的变量, 通常是私有的;&lt;/li&gt;
&lt;li&gt;封装:&lt;pre&gt;&lt;co
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF" scheme="http://yoursite.com/tags/GOF/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》(第三版) 之 Kotlin 的总结</title>
    <link href="http://yoursite.com/2020/05/20/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B-%E7%AC%AC%E4%B8%89%E7%89%88-%E4%B9%8B-Kotlin-%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/05/20/《第一行代码》-第三版-之-Kotlin-的总结/</id>
    <published>2020-05-20T14:38:32.000Z</published>
    <updated>2020-06-23T15:30:00.336Z</updated>
    
    <content type="html"><![CDATA[<ol><li>循环： ..     是左闭右闭<pre><code>downTo 是左闭右闭until  是左闭右开</code></pre></li><li>类：任何一个非抽象类默认都是不可以被继承的。</li><li>构造函数：子类的主构造函数调用父类中的哪个构造函数，在继承的时候通过括号来指定。<pre><code>子类在主构造函数中声明成 val 或 var 的参数将自动成为该类的字段，就会与父类同名的字段冲突。因此，同名的参数前面我们不用加任何关键字，让它的作用域仅限定在主构造函数当中。子类没有主构造函数只有次构造函数时，继承父类就不需要加括号了。</code></pre></li><li><p>接口：Kotlin 中允许对接口的定义的函数进行默认实现（JDK 1.8 后也支持）。</p></li><li><p>函数的可见性修饰符：</p><ul><li>Java: public、private、protected、default</li><li>Kotlin: publi、private、protected、internal</li><li>Java 中默认是 default</li><li><p>Kotlin 中默认是 public</p><p>修饰符 | Java |  Kotlin<br>-|-|-<br>public | 所有类可见 | 所有类可见 |<br>private | 当前类可见 | 当前类可见 |<br>protected | 当前类、子类、同一包路径下的类可见 | 当前类、子类可见 |<br>default | 同一包路径下的类可见 | 无 |<br>internal | 无 | 同一模块中的类可见 |</p></li></ul></li></ol><a id="more"></a><ol start="6"><li>数据类：类名前面声明了 data 关键字，Kotlin 会根据主构造函数中的参数帮自动生成 equals()、hashCode()、toString() 等方法。</li><li>单例类：object SingleTon {}</li><li>集合：创建：listOf(“a”, “b”) ; mutableListOf(“a”, “b”)<pre><code>      setOf(); mutableSetOf()      mapOf(&quot;a&quot; to 1, &quot;b&quot; to 2)   (ps: key to value)api：maxBy()；map()；filter()；any()；all()；；；</code></pre></li><li>Lambda：表达式的语法结构：{ 参数名1：参数类型，参数名2：参数类型 -&gt; 函数体 }。<pre><code>当 Lambda 参数是函数的最后一个参数时，可以将 Lambda 表达式移到函数括号的外面；当 Lambda 参数是函数的唯一一个参数时，可以将函数的括号省略；Lambda 表达式中的参数列表在大多数情况下不必声明参数类型；当 Lambda 参数列表中只有一个参数时，也不必声明参数名，可以用 it 关键字代替。</code></pre></li><li>匿名内部类：创建匿名内部类时不能使用 new，而是改用了 object 关键字。</li><li>Java 函数式 API：如果我们在 Kotlin 代码中调用了一个Java方法，并且该方法接收一个 Java 单抽象方法接口参数，就可以使用函数式 API。<pre><code>如果一个 Java 方法的参数列表中不存在一个以上 Java 单抽象方法接口参数，还可以将参数名进行省略。PS：限定于从 Kotlin 中调用 Java 方法，并且单抽象方法接口也必须用 Java 语言定义。</code></pre></li><li>可空类型：在类名后面加一个问号</li><li>判空辅助工具：<ul><li>?. 当对象不为空时正常调用相应的方法，为空时则什么都不做。</li><li>?: 操作符左右各接收一个表达式，如果左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果。</li><li>!! 非空断言工具，告诉 Kotlin，我非常确信这里的对象不为空，所以你不用来帮我做空指针检查了</li></ul></li><li>let 函数：主要是配合 ?. 操作符进行辅助判空处理。let 函数可以处理全局变量的判空问题，而 if 判断语句不行。</li><li>字符串内嵌表达式：”$obj”；”${obj.name}”</li><li>函数的参数默认值：可以通过键值对的方式来传参。</li><li>标准函数：let、with、run、apply<ul><li>with：接收两个参数，第一个是任意类型的对象，第二个是 Lambda 表达式。<pre><code>with 函数会在 Lambda 表达式中提供第一个参数对象的上下文，并将 Lambda 表达式中的最后一行代码最为返回值返回。用处：连续调用同一个对象的多个方法时让代码变得精简。</code></pre></li><li>run：一定要调用某个对象的 run 函数<pre><code>只接收一个参数，Lambda 表达式会在 Lambda 表达式中提供对象的上下文，并将 Lambda 表达式中的最后一行代码最为返回值返回。</code></pre></li><li>apply：一定要调用某个对象的 apply 函数<pre><code>只接收一个参数，Lambda 表达式会在 Lambda 表达式中提供对象的上下文，并将 Lambda 表达式中的最后一行代码最为返回值返回。</code></pre></li></ul></li><li>定义静态方法：<ul><li>companion object {} (PS: 在类中创建有且唯一的伴生类对象，调用的静态方法实际上就是调用的伴生对象的方法)</li><li>顶层方法，指的是没有定义在任何类中的方法。</li><li>给单例类或者 companion object 中的方法加上 @JvmStatic 注解</li></ul></li><li>延迟初始化：lateinit<pre><code>::adapter.isInitiallized 用来判断 adapter 变量是否已经初始化</code></pre></li><li>密封类：sealed class<pre><code>用处：在 when 语句中传入一个密封类变量作为条件，可以确保所有的情况，同时不用写 else</code></pre></li><li>扩展函数：语法结构: fun ClassName.methodName(param1: Int, param2: Int): Int { return 0 }</li><li>运算符重载：operator</li><li>高阶函数：定义：如果一个函数接收另一个函数作为参数，或者返回值的类型是另一个函数，那么该函数就称为高阶函数。<pre><code>函数类型的基本规则：ClassName.(String, Int) -&gt; Unit (PS: 左边的部分用来声明该函数接收什么参数，右边的部分用来声明该函数的返回值是什么类型；加上 ClassName. 表明该函数类型参数是该 ClassName 对象的函数)。用处：允许让函数类型的参数来决定函数的执行逻辑。函数的引用方式：::plus 表示将 plus() 函数作为参数传递给方法里。调用高阶函数的方式：    - 定义一个与其函数类型参数相匹配的函数    - Lambda 表达式 (Lambda 表达式中的最后一行代码会自动作为返回值)    - 匿名内部类    - 成员引用实现原理：Lambda 表达式在底层被转换成了匿名内部类的实现方式</code></pre></li><li>内联函数：在定义高阶函数时加上 inline 关键字的声明<pre><code>解决的问题：解决每调用 Lambda 表达式，都会创建一个新的匿名内部类实例造成的额外的内存及性能开销工作原理：Kotlin 编译器会将 Lambda 表达式中的函数体替换到调用它的地方局限性：内联的函数类型参数在编译时会被进行代码替换，没有真正的参数属性，所以内联的函数类型参数只允许传递给另外一个内联函数</code></pre></li><li>noinline 与内联函数的区别：<pre><code>- 非内联的函数类型参数可以自由的传递给其他任何函数；内联的函数类型参数只允许传递给另外一个内联函数- 非内联函数所引用的 Lambda 表达式中只能进行局部返回；内联函数所引用的 Lambda 表达式中是可以使用 return 关键字来进行函数的返回及局部返回</code></pre></li><li>crossinline：<pre><code>内联函数可能会遇到的问题：在 Lambda 或者匿名内部类中调用了传入的函数类型参数，因为内联函数所引用的 Lambda 表达式允许使用 return 关键字进行函数返回，而匿名类中调用的函数类型参数，此时是不可能进行外层的函数返回，最多只能对匿名类中的函数调用进行返回，因此会报错解决办法：在函数类型参数前面加上 crossinline原理：crossinline 关键字就像一个契约，用于保证内联函数的 Lambda 表达式中一定不会使用 return 关键字，但仍可以使用局部返回</code></pre></li><li>Any 是 Kotlin 中所有类的共同基类，相当于 Java 中的 Object</li><li>vararg 对应的就是 Java 中的可变参数列表</li><li>在 Kotlin 中使用 A to B 这样的语法结构会创建一个 Pair 对象</li><li>Kotlin 中有 Smart Cast 功能，适用于 when 及 if</li><li>泛型：<pre><code>两种定义方式:        - 定义泛型类        - 定义泛型方法        （PS：语法结构都是 &lt;T&gt; ）泛型的上界：&lt;T : Number&gt;          默认情况下，所有的泛型都是可以指定成可空类型的，这是因为在不手动指定上界的时候，泛型的上界默认是 Any?；          想要泛型的类型不为空，只需要将泛型的上界手动指定成 Any 就行了。</code></pre></li><li>类委托：by<pre><code>委托模式的意义：我们只是让大部分的方法实现调用辅助对象中的方法，少部分的方法实现由自己来重写，甚至加入一些自己独有的方法。委托模式的弊端：遇到接口中待实现的方法太多解决方案：通过类委托的功能来解决核心：将一个类的具体实现委托给另一个类去完成</code></pre></li><li>委托属性<pre><code>核心：将一个属性的具体实现委托给另一个类去完成by lazy { }        by 是 Kotlin 中的关键字，lazy 在这里只是一个高阶函数，在 lazy 函数中会创建并返回一个 Delegate 对象，然后当我们调用 p 属性时，其实调用的是 Delecate 对象的 getValue() 方法，然后 getValue() 方法中又会调用 lazy 函数传入的 Lambda 表达式，并且调用 p 属性后得到的值就是 Lambda 表达式中最后一行代码</code></pre></li><li>infix 函数：允许我们将函数调用时的小数点、括号等计算机相关的语法去掉<pre><code>例如：A.to(B) 等价成 A to B两点限制：1. infix 函数是不能定义成顶层函数的，它必须是某个类的成员函数，可以使用扩展函数的方式将它定义到某个类当中；         2. infix 函数必须接收且只能接收一个参数，至于参数类型没有限制；</code></pre></li><li>对泛型进行实化：<pre><code>Java 中不支持 T.class泛型功能的实现：Java 泛型功能是通过类型擦除机制来实现的，也就是说泛型对于类型的约束只在编译时期存在，运行的时候仍然会按照 JDK1.5 之前的机制来运行，JVM 是识别不出来我们在代码中指定的泛型类型。泛型实化的条件：1.该函数必须是内联函数               2.在声明泛型的地方必须加上 reified 关键字泛型实化：inline fun &lt;reified T&gt; getGenericType() {}泛型实化的用处：允许我们在泛型函数当中获得泛型的实际类型，这也使得类似于 T::class.java ; a is T 这样的语法成为了可能。</code></pre></li><li>泛型的协变：<pre><code>先说一个约定：一个泛型类或者泛型接口中的方法，它的参数列表是接收数据的地方，称为 in 位置；它的返回值是输出数据的地方，称为 out 位置；协变的定义：假如定义了一个 MyClass&lt;T&gt; 的泛型类，其中 A 是 B 的子类型，同时 MyClass&lt;A&gt; 又是 MyClass&lt;B&gt; 的子类型，那么我们就称 MyClass 在 T 这个泛型上是协变的。实现的方式：如果一个泛型类在其泛型类型的数据上是只读的话，那么它是没有类型转换的安全隐患的；所以需要让 MyClass&lt;T&gt; 类中的所有方法都不能接收 T 类型的参数，即 T 只能出现在 out 位置上，而不能出现在 in 位置上。</code></pre></li><li>泛型的逆变：<pre><code>逆变的定义：假如定义了一个 MyClass&lt;T&gt; 的泛型类，其中 A 是 B 的子类型，同时 MyClass&lt;B&gt; 又是 MyClass&lt;A&gt; 的子类型，那么我们就称 MyClass 在 T 这个泛型上是逆变的。实现的方式：在泛型 T 的声明前面加上了一个 in 关键字。这就意味着 T 只能出现在 in 位置上，而不能出现在 out 位置上。</code></pre></li><li>协程：简单理解为一种轻量级的线程，用来提升并发编程的运行效率。(一套线程框架)<pre><code>有点: 方便, 方便在它能在同一个代码块里进行多次的线程切换.开启方式：        - Global.launch {} : 每次创建的都是一个顶层协程，这种协程当应用程序运行结束时跟着一起结束。        - runBlocking 函数 : 同样会创建一个协程的作用域，但是它可以保证在协程作用域内的所有代码和子代码没有全部执行完成前一直阻塞当前线程 (PS: 只在测试环境使用，生产环境会有性能问题)        - launch 函数 : 用来创建多个协程，但是首先它必须要在协程的作用域下才能调用；其次它会在当前协程的作用域下创建子协程 （PS: 子协程的特点是 如果外层作用域的协程结束了，该作用域下的所有子协程也会一同结束）delay 函数: 非阻塞式的挂起函数, 只会挂起当前协程，并不会影响其他协程 (PS: delay 函数只能在协程作用域或其它挂起函数中调用)协程的取消: GlobalScope.launch 或 launch 函数都会返回一个 Job 对象, 只要调用 Job 对象的 cancel() 方法就可以取消协程了</code></pre></li><li>挂起函数: suspend<pre><code>可以将任意的函数声明成挂起函数，而挂起函数之间是可以互相调用的；suspend 无法给函数提供协程作用域的。</code></pre></li><li>coroutineScope 函数: 用来解决 suspend 挂起函数无法提供协程作用域的问题。<pre><code>特点: - 会继承外部的协程作用域并创建一个子作用域, 这样就可以给任意挂起函数提供协程作用域了；     - 保证其作用域内的所有代码和子协程在全部执行完之前, 会一直阻塞当前协程。     - 可以在协程作用域或者挂起函数内调用</code></pre></li><li>async 函数: 会创建一个新的子协程并返回一个 Deferred 对象, 如果我们想要获取 async 函数代码块的执行结果，只需要调用 Deferred 对象的 await() 方法即可。(PS: async 只能在协程作用域里调用)。<pre><code>调用 async 函数之后, 会立刻执行代码块中的代码; 当调用 await() 方法时，如果代码块里的代码还没执行完, 那么 await() 方法会将当前协程阻塞, 直到可以获得 async 函数的执行结果。</code></pre></li><li>withContext 函数: 一个挂起函数, 可以理解成 async 函数的一种简化版写法，相当于 async {}.await(), 不同的是 withContext 函数强制要求我们指定一个线程参数。</li><li>线程参数:<pre><code>- Dispatchers.Default : 默认低并发的线程策略, 当你要执行的代码属于计算密集型任务时- Dispatchers.IO : 较高并发线程策略, 执行的代码大多数时间是阻塞和等待中- Dispatchers.Main : Android 主线程中执行代码PS: 协程作用域构建器中，除了 coroutineScope 函数之外, 其他所有的函数都是可以指定这样一个线程参数的。</code></pre></li><li>suspendCoroutiner 函数:<pre><code>作用: 简化传统回调机制必须在协程作用域或挂起函数中调用使用: 接收一个 Lambda 表达式参数, 将当前协程立即挂起, 然后在一个普通线程中执行 Lambda 表达式中的代码。Lambda 表达式的参数列表中会传入一个 Continuation 参数, 调用它的 resume()方法或 resumeWithException() 方法可以让协程恢复。</code></pre></li><li>DSL: 领域特定语言<pre><code>infix 函数构建出的特有语法结构就属于 DSL</code></pre></li><li>ViewModel<pre><code>作用：帮 Activity 分担一部分工作，专门用于存放与界面相关的数据；将与界面相关的变量存放在 ViewModel 中，即使旋转手机屏幕，界面上显示的数据也不会丢失。使用：ViewModelProviders.of(xxxActivity).get(xxxViewModel::class.java)向 ViewModel 传递参数：借助 ViewModelProvider.Factory</code></pre></li><li>Lifecycles<pre><code>解决问题：编写 Android 应用程序时，需要感知 Activity 生命周期的情况。使用：lifecycle.addObserver(xxObserver);      MyObserver 中，在方法上使用 @OnLifecycleEvent 注解，传入生命周期事件（ON_CREATE、ON_START、ON_RESUME、ON_PAUSE、ON_STOP、ON_DESTROY、ON_ANY）;      MyObserver 虽然能够感知到 Activity 的生命周期发生变化，却没法主动获取当前的生命周期状态，因此可以在 MyObserver 的构造函数中传入 lifecycle 对象，通过 lifecycle.currentState 返回生命周期状态，包括 INITIALIZED、DESTROYED、CREATED、STARTED、RESUMED</code></pre></li><li>LiveData<pre><code>遇到的问题：我们一直使用的都是在 Activity 中手动获取到 ViewModel 中的数据这种交互方式，但是 ViewModel 却无法将数据的变化主动通知给 Activity。解决方案：LiveData 可以包含任何类型的数据，并在数据发生变化时通知给观察者;         MutableLiveData 是一种可变的 LiveData, 有三种读写数据的方法：getValue()、setValue()、postValue();         任何 LiveData 都可以调用它的 observe() 方法来观察数据的变化；observer() 接收两个参数，第一个参数是 LifecycleOwner 对象，第二个参数是 Observer 接口，当 LiveData 中包含的数据发生变化时，就会回调到这里。推荐：永远只暴露不可变的 LiveData 给外部。map() 方法：        作用：将实际包含数据的 LiveData 和 仅用于观察数据的 LiveData 进行转换。        使用：调用 Transformations 的 map() 方法，接收两个参数，第一个参数是原始的包含数据的 LiveData，第二个参数是一个转换函数，在转换函数里编写具体的转换逻辑，转换函数中返回的是用于观察的 LiveData 数据所包含的数据类型。switchMap() 方法：        遇到的问题：很可能 ViewModel 中的某个 LiveData 对象是调用另外的方法获取的，这样每次调用方法返回的都是一个新的 LiveData 对象，如果直接观察的话，观察的一直都是老的 LiveData，所以无法观察到数据的变化。        作用：将调用另外的方法获取的 LiveData 转换成另外一个可观察的 LiveData。        使用：将触发数据变化的值封装成一个 LiveData，然后调用 Transformations 的 switchMap() 方法，接收两个参数，第一个参数是触发数据变化的值的LiveData，第二个参数是转换函数，转换函数中返回的是一个 LiveData 对象。        工作原理：将转换函数中返回的 LiveData 对象转换成另一个可观察的 LiveData 对象。注意: - LiveData 内部不会判断即将设置的数据和原有数据是否相同；      -当 Activity 不可见时，如果 LiveData 中的数据发生了变化，是不会通知给观察者的。只有当 Activity 可见时，才会将数据通知给观察者（通过 Lifecycles 组件实现该细节）；      - 如果 Activity 不可见时，LiveData 发生了多次数据变化，当 Activity 恢复可见时，只有最新的那份数据会通知观察者，前面的数据直接丢弃掉。</code></pre></li><li>ViewModel + LiveData<pre><code>架构思路：        1. 将 Activity 上触发数据变化的值在 ViewModel 中封装成一个包含数据(变化的值)的 private LiveData，再在 ViewModel 中定义一个方法，更新这个包含数据 LiveData 的 value；        2. 再在 ViewModel 中定义一个 public 的仅用于观察的 LiveData (没有 set()), 这个仅用于观察的 LiveData 可以通过定义的 get() 获取，亦或者通过 Transformations 的 map() 或者 switchMap() 将 包含数据的 private LiveData 进行处理等逻辑后获取的新的用于观察的 LiveData        3. 在 Activity 中观察该用于观察的 LiveData 的数据变化，更新 UI</code></pre></li><li>Room<pre><code>ORM：对象关系映射；简单说：使用的编程语言是面向对象语言，数据库是关系型数据库，这两者之间建立一种映射关系，就是 ORM。ORM 框架好处：用面向对象的思维来和数据库进行交互，绝大多数情况下不用和 SQL 语句打交道了；也不用担心操作数据库的逻辑会让项目的整体代码变得混乱。使用：    - Entity：封装数据的实体类        (良好的数据库编程建议：给每个实体类都添加一个 id 字段，并将这个字段设为主键)    - Dao：对数据库的各项操作进行封装        (Dao 要做的事情就是覆盖所有的业务需求，使得业务永远只需要与 Dao 层进行交互，而不必和底层数据库打交道)    - Database：定义数据库中的关键信息        (定义3个部分内容, 数据库的版本号、包含哪些实体类、提供 Dao 层的访问实例)</code></pre></li></ol><p>以下是自己发现的问题:</p><ol start="51"><li>Kotlin 中 使用反射类时, 使用 Class.forName(xxx) 时, 需要传进完整的包名, 如下:</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> forName = Class.forName(Printer2::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">name</span>)</span></span><br><span class="line"><span class="keyword">val</span> forName = Class.forName(<span class="string">"Printer2"</span>) <span class="comment">// 这样不正确, 找不到 Printer2 类</span></span><br></pre></td></tr></table></figure><ol start="52"><li>data class 对象可能会绕过 Kotlin 的空指针检查，也可能未执行父类构造方法就把对象构造出来， 如下：</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">定义一个父类: </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> People()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"people cons"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">写一个 Bean, 接收服务器返回的数据：</span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>) : People()</span><br><span class="line">然后构造该对象: </span><br><span class="line"><span class="keyword">val</span> gson = Gson()</span><br><span class="line"><span class="keyword">val</span> person = gson.fromJson&lt;Person&gt;(<span class="string">"&#123;\"age\":\"12\"&#125;"</span>, Person::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">println(person.name )   <span class="comment">// 打印 null， 没有走父类的构造函数</span></span><br></pre></td></tr></table></figure><p>原因在 Gson 的源码中: </p><p>Gson 创建对象，一般都会走到以下三个方法里：</p><ul><li>newDefaultConstructor         // 尝试获取无参的构造函数，如果找到，则通过 newInstance 反射的方式构建对象</li><li>newDefaultImplementationConstructor   // 这个方法里面都是一些集合类相关对象的逻辑，直接跳过</li><li>newUnsafeAllocator    // 在没有找到无参的构造方法后，通过sun.misc.Unsafe构造了一个对象</li></ul><p>newu 如何不安全的创建一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UnsafeAllocator <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// try JVM</span></span><br><span class="line"><span class="comment">// public class Unsafe &#123;</span></span><br><span class="line"><span class="comment">//   public Object allocateInstance(Class&lt;?&gt; type);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Class&lt;?&gt; unsafeClass = Class.forName(<span class="string">"sun.misc.Unsafe"</span>);</span><br><span class="line">  Field f = unsafeClass.getDeclaredField(<span class="string">"theUnsafe"</span>);</span><br><span class="line">  f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">final</span> Object unsafe = f.get(<span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">final</span> Method allocateInstance = unsafeClass.getMethod(<span class="string">"allocateInstance"</span>, Class.class);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> UnsafeAllocator() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Class&lt;T&gt; c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      assertInstantiable(c);</span><br><span class="line">      <span class="keyword">return</span> (T) allocateInstance.invoke(unsafe, c);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// try dalvikvm, post-gingerbread use ObjectStreamClass</span></span><br><span class="line"><span class="comment">// try dalvikvm, pre-gingerbread , ObjectInputStream</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们Person没有提供默认的构造方法，Gson在没有找到默认构造方法时，它就直接通过Unsafe的方法，绕过了构造方法，直接构建了一个对象。</p><ol start="53"><li>协程是非阻塞式挂起的是什么意思呢？就是一段程序切到另一个线程执行，不会卡住到主线程。</li><li>扔物线对协程的总结:<pre><code>定义: 协程是一套协程框架.      协程是一套处理并发事件的方案, 同时也是方案中的核心组件. (参考 Adapter)      协程和线程一个层级.      协程中没有线程, 也不存在并行.      Kotlin 协程不需要关心并行/并发, 同时 Kotlin for Java 不属于广义的协程, 它是基于 Java 线程的, 所以不是什么轻量级线程.使用: - launch() 开启一段协程     - 需要后台工作的函数加上 Suspend, 在内部调用其他的 Suspend 函数切换线程, 一般都是用 withContext     - 主函数调用时, 一条线写下来     PS: 耗时操作都放在 Suspend 函数中, 主函数不用关心耗时操作的内部线程切换.Suspend: 不是线程切换, 只是标记和提醒; Suspend 函数里的协程切换, 不会影响调用函数的线程.协程泄露本质就是线程泄露 (同 AsyncTask)</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;循环： ..     是左闭右闭&lt;pre&gt;&lt;code&gt;downTo 是左闭右闭
until  是左闭右开
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;类：任何一个非抽象类默认都是不可以被继承的。&lt;/li&gt;
&lt;li&gt;构造函数：子类的主构造函数调用父类中的哪个构造函数，在继承的时候通过括号来指定。&lt;pre&gt;&lt;code&gt;子类在主构造函数中声明成 val 或 var 的参数将自动成为该类的字段，就会与父类同名的字段冲突。因此，同名的参数前面我们不用加任何关键字，让它的作用域仅限定在主构造函数当中。
子类没有主构造函数只有次构造函数时，继承父类就不需要加括号了。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口：Kotlin 中允许对接口的定义的函数进行默认实现（JDK 1.8 后也支持）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数的可见性修饰符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: public、private、protected、default&lt;/li&gt;
&lt;li&gt;Kotlin: publi、private、protected、internal&lt;/li&gt;
&lt;li&gt;Java 中默认是 default&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kotlin 中默认是 public&lt;/p&gt;
&lt;p&gt;修饰符 | Java |  Kotlin&lt;br&gt;-|-|-&lt;br&gt;public | 所有类可见 | 所有类可见 |&lt;br&gt;private | 当前类可见 | 当前类可见 |&lt;br&gt;protected | 当前类、子类、同一包路径下的类可见 | 当前类、子类可见 |&lt;br&gt;default | 同一包路径下的类可见 | 无 |&lt;br&gt;internal | 无 | 同一模块中的类可见 |&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android Daily Interview</title>
    <link href="http://yoursite.com/2019/11/06/Android-Daily-Interview/"/>
    <id>http://yoursite.com/2019/11/06/Android-Daily-Interview/</id>
    <published>2019-11-06T14:21:47.000Z</published>
    <updated>2020-05-21T13:34:55.662Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容参考 <a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">Android Daily Interview</a><br>小聚成河，大聚成江，坚持下来的都是时代的铸就者，共勉之！</p><a id="more"></a><h2 id="自定义-Handler-时如何有效地避免内存泄漏问题？"><a href="#自定义-Handler-时如何有效地避免内存泄漏问题？" class="headerlink" title="自定义 Handler 时如何有效地避免内存泄漏问题？"></a>自定义 Handler 时如何有效地避免内存泄漏问题？</h2><p>原因:<br>非静态的内部类会持有外部类的引用,若 Activity 退出时, handler 队列中有未处理的 Message, handler 持有 activity, Message 持有 handler, MessageQueen 持有 Message, 则 activity 无法销毁, 就会造成内存泄漏.</p><p>解决方案: </p><ol><li>自定义静态 Handler</li><li>加一个弱引用</li><li>ondestroy()时, removecallbacksandmessages去清除Message和Runnable</li></ol><h2 id="Activity-与-Fragment-之间常见的几种通信方式？"><a href="#Activity-与-Fragment-之间常见的几种通信方式？" class="headerlink" title="Activity 与 Fragment 之间常见的几种通信方式？"></a>Activity 与 Fragment 之间常见的几种通信方式？</h2><ol><li>接口</li><li>Bundle</li><li>广播</li><li>EventBus</li><li>viewModel </li></ol><p>再简单说: 两个 Java 对象相互持有对方的引用,直接回调就行.</p><h2 id="一般什么情况下会导致内存泄漏问题？"><a href="#一般什么情况下会导致内存泄漏问题？" class="headerlink" title="一般什么情况下会导致内存泄漏问题？"></a>一般什么情况下会导致内存泄漏问题？</h2><p>原因: </p><ol><li>资源对象没关闭 ( Cursor、File 等)</li><li>接收器、监听器没取消 (广播、EventBus等)</li><li>持有 Activity 的 Context (Context 与 单例)</li><li>非静态内部类持有外部类的引用所造成的 (handler)</li><li>静态类持有非静态类对象 (工具类持有 Activity context)</li></ol><p>如何避免:</p><ul><li><p>编码规范上:</p><ol><li>资源对象用完一定要关闭，最好加finally</li><li>接收器、监听器使用时候注册和取消成对出现</li><li>context使用注意生命周期，如果是静态类引用直接用ApplicationContext</li><li>使用静态内部类;合业务场景，设置软引用，弱引用，确保对象可以在合适的时机回收</li><li>同 3</li></ol></li><li><p>内存监控体系:</p><ol><li>使用ArtHook检测图片尺寸是否超出imageview自身宽高的2倍</li><li>编码阶段Memery Profile看app的内存使用情况，是否存在内存抖动，内存泄漏，结合Mat分析内存泄漏</li><li>使用LeakCannery自动化内存泄漏分析</li><li>上报app使用期间待机内存、重点模块内存、OOM率</li><li>报整体及重点模块的GC次数，GC时间</li></ol></li><li><p>兜底策略:<br>  低内存状态回调，根据不同的内存等级做一些事情，比如在最严重的等级清空所有的bitmap，关掉所有界面，直接强制把app跳转到主界面，相当于app重新启动了一次一样，这样就避免了系统Kill应用进程，与其让系统kill进程还不如浪费一些用户体验，自己主动回收内存</p></li></ul><h2 id="LaunchMode-的应用场景？"><a href="#LaunchMode-的应用场景？" class="headerlink" title="LaunchMode 的应用场景？"></a>LaunchMode 的应用场景？</h2><h3 id="Standard-标准模式"><a href="#Standard-标准模式" class="headerlink" title="Standard 标准模式"></a>Standard 标准模式</h3><p>系统总是会在目标栈中创建新的activity实例。</p><p>for example: 个人中心 -&gt; 粉丝列表 -&gt; 个人中心(粉丝的) -&gt; 粉丝列表(粉丝的)</p><h3 id="SingleTop-栈顶模式"><a href="#SingleTop-栈顶模式" class="headerlink" title="SingleTop 栈顶模式"></a>SingleTop 栈顶模式</h3><ul><li>如果这个 activity 实例已经存在目标栈的栈顶，系统会调用这个 activity 中的 onNewIntent() 方法，并传递 intent，而不会创建新的 activity 实例；</li><li>如果不存在这个 activity 实例或者 activity 实例不在栈顶，则 SingleTop 和 Standard 作用是一样的。</li></ul><p>for example: 从消息中心点开的详情页面</p><h3 id="SingleTask-栈中模式"><a href="#SingleTask-栈中模式" class="headerlink" title="SingleTask 栈中模式"></a>SingleTask 栈中模式</h3><ul><li>不会存在多个实例，如果栈中不存在 activity 实例，系统会在新栈的根部创建一个新的 activity；</li><li>如果这个 activity 实例已经存在，系统会把该 activity 栈上面的 其他 activity 都销毁，并调用该 activity 的 onNewIntent() 方法，而不会创建新的 activity 实例。</li></ul><p>for example: app 首页,从任何页面回来,都把上面的 activity 销毁</p><h3 id="SingleInstance"><a href="#SingleInstance" class="headerlink" title="SingleInstance"></a>SingleInstance</h3><p>会启用一个新的栈结构，将 Acitvity 放置于这个新的栈结构中，并保证不再有其他 Activity 实例进入该新的栈。</p><p>for example: 闹钟提醒页面、打电话页面，当你从正常页面调到闹钟提醒页面，再返回的时候，希望返回之前的页面，且不受影响。</p><h2 id="哪些情况下会导致oom问题？"><a href="#哪些情况下会导致oom问题？" class="headerlink" title="哪些情况下会导致oom问题？"></a>哪些情况下会导致oom问题？</h2><p>简单说：</p><ol><li>申请内存的速度超出gc释放内存的速度， 例如大图加载</li><li>过多的泄露也会导致溢出</li></ol><p>总结：</p><p>1、根据java的内存模型会出现内存溢出的内存有堆内存、方法区内存、虚拟机栈内存、native方法区内存；<br>2、一般说的OOM基本都是针对堆内存；<br>3、对于堆内存溢出主的根本原因有两种<br>（1）app进程内存达到上限<br>（2）手机可用内存不足，这种情况并不是我们app消耗了很多内存，而是整个手机内存不足<br>4、而我们需要解决的主要是app的内存达到上限<br>5、对于app内存达到上限只有两种情况<br>（1）申请内存的速度超出gc释放内存的速度<br>（2）内存出现泄漏，gc无法回收泄漏的内存，导致可用内存越来越少<br>6、对于申请内存速度超出gc释放内存的速度主要有2种情况<br>（1）往内存中加载超大文件<br>（2）循环创建大量对象<br>7、一般申请内存的速度超出gc释放内存基本不会出现，内存泄漏才是出现问题的关键所在<br>8、内存泄漏常见场景<br>    见问题《一般什么情况下会导致内存泄漏问题？》<br>9、怎么对内存进行优化呢<br>三个方向<br>（1）为应用申请更大内存，把manifest上的largdgeheap设置为true<br>（2）减少内存的使用<br>①使用优化后的集合对象，比如SpaseArray；<br>②使用微信的mmkv替代sharedpreference；<br>③对于经常打log的地方使用StringBuilder来组拼，替代String拼接<br>④统一带有缓存的基础库，特别是图片库，如果用了两套不一样的图片加载库就会出现2个图片各自维护一套图片缓存<br>⑤给ImageView设置合适尺寸的图片，列表页显示缩略图，查看大图显示原图；图片使用软引用，内存不够及时回收<br>⑥优化业务架构设计，比如省市区数据分批加载，需要加载省就加载省，需要加载市就加载失去，避免一下子加载所有数据<br>（3）避免内存泄漏<br>同见问题《一般什么情况下会导致内存泄漏问题？》</p><h2 id="如何实现多线程中的同步？"><a href="#如何实现多线程中的同步？" class="headerlink" title="如何实现多线程中的同步？"></a>如何实现多线程中的同步？</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下内容参考 &lt;a href=&quot;https://github.com/Moosphan/Android-Daily-Interview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Daily Interview&lt;/a&gt;&lt;br&gt;小聚成河，大聚成江，坚持下来的都是时代的铸就者，共勉之！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2 超全使用攻略</title>
    <link href="http://yoursite.com/2019/10/09/Dagger2-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/09/Dagger2-的使用/</id>
    <published>2019-10-09T14:20:50.000Z</published>
    <updated>2019-10-22T12:32:18.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-Gradle-中的使用"><a href="#在-Gradle-中的使用" class="headerlink" title="在 Gradle 中的使用"></a>在 Gradle 中的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.google.dagger:dagger:2.4'</span></span><br><span class="line">annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.4'</span></span><br><span class="line"><span class="comment">//java注解</span></span><br><span class="line">implementation <span class="string">'org.glassfish:javax.annotation:10.0-b28'</span></span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">implements</span> <span class="title">IPresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    IView view;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被注入对象的构造函数中添加 @Inject (方式2)</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(IView view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Module</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IView view;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainModule</span><span class="params">(IView view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Module 中提供被注入的对象(或构建该对象所需的参数) (方式1(优先))</span></span><br><span class="line">    <span class="comment">// 需要添加 @Provides 注解, 方法名为 provideXXX()</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">IView <span class="title">provide</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入器, 被注入的对象(MainPresenter)和注入的类(MainActivity)的桥梁</span></span><br><span class="line"><span class="meta">@Component</span>(modules = MainModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IView</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 @Inject 注入 MainPresenter 对象</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    MainPresenter presenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// -&gt; Make Project 生成相应的注解类</span></span><br><span class="line">        DaggerMainComponent.builder().mainModule(<span class="keyword">new</span> MainModule(<span class="keyword">this</span>)).build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        presenter.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="生成类流程图"><a href="#生成类流程图" class="headerlink" title="生成类流程图"></a>生成类流程图</h2><p><img src="/images/dagger2.png" alt="Dagger2 流程图"></p><p>简单总结:<br>@Inject 带有此注解的属性或构造方法将参与到依赖注入中，Dagger2会实例化有此注解的类<br>@Module 带有此注解的类，用来提供依赖，里面定义一些用@Provides注解的以provide开头的方法，这些方法就是所提供的依赖，Dagger2会在该类中寻找实例化某个类所需要的依赖。<br>@Component 用来将@Inject和@Module联系起来的桥梁，从@Module中获取依赖并将依赖注入给@Inject</p><h2 id="不同注解的含义"><a href="#不同注解的含义" class="headerlink" title="不同注解的含义"></a>不同注解的含义</h2><h3 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3><p>@Inject用于注解构造函数或成员变量</p><h4 id="作用于成员变量时"><a href="#作用于成员变量时" class="headerlink" title="作用于成员变量时"></a>作用于成员变量时</h4><p>Dagger2根据该注解及成员变量的类型，从moudle中得到相应实例。<br>注意：成员变量的访问修饰符不能是private</p><h4 id="作用于构造函数时"><a href="#作用于构造函数时" class="headerlink" title="作用于构造函数时"></a>作用于构造函数时</h4><p>就是Dagger2对于获取对象实例的方式2，比如上面的例子其实可以直接在Presenter的构造函数上注解@Inject，并移除@Provides注解的方法</p><h4 id="Inject-不适用的情况"><a href="#Inject-不适用的情况" class="headerlink" title="@Inject 不适用的情况"></a>@Inject 不适用的情况</h4><ul><li>不具有构造函数的接口</li><li>远程引入的三方库中的类无法被添加注解</li><li>通过建造者模式等方式可配置化的进行构造的对象</li></ul><p>(使用@Provides可以处理这些问题)</p><h3 id="Module"><a href="#Module" class="headerlink" title="@Module"></a>@Module</h3><p>@Module注解用于获取对象实例的类，Dagger2根据该注解知道应该去哪个类里获取对象实例    (上面的方式 1)</p><h3 id="Provides"><a href="#Provides" class="headerlink" title="@Provides"></a>@Provides</h3><p>@Provides注解用于module类中获取对象实例的方法，Dagger2根据该注解及方法的返回值类型将对象实例注入到对应的引用中</p><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>@Component注解用于担任连接桥梁的接口，其两端分别是在@Component的参数中指定的modules数组和在方法参数中指定的具体类<br>注意：方法参数必须是要注入的具体类，而非其父类或接口</p><p>注:<br>方式一的优先级高于方式二：</p><p>在供应某实例时，会先通过方式一查找是否存在返回该实例的的方法<br>如果存在，则获取实例并对外供应<br>如果不存在，再通过方式二查找是否存在@Inject标注的构造函数<br>如果存在，则将通过该构造函数构造实例并对外供应<br>如果不存在，那将报错，因为无法供应所需的实例</p><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="@Singleton"></a>@Singleton</h3><p>使得对象成为单例只需要同时在@Provides注解的方法和component接口上添加@Singleton这个注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AppModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(App app)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FactoryA <span class="title">providesFactoryA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FactoryA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者方式 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span></span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FactoryA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</span><br></pre></td></tr></table></figure><p>注意: @Singleton 并不代表单例, 真正起作用的事 @Scope 这个注解.<br>可以使用任意的被 @Scope 所注解的注解,来替代 @Singleton ,都可以实现单例.<br>@Scope 是通过 DoubleCheck 缓存获取到的对象实例实现 Component 的组件的生命周期内的对象的单例性.</p><h3 id="Binds"><a href="#Binds" class="headerlink" title="@Binds"></a>@Binds</h3><p>当注入抽象类时使用 @Binds</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Factory <span class="title">bindsFactory</span><span class="params">(FactoryB factoryB)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FactoryA <span class="title">providesFactoryA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FactoryA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FactoryB <span class="title">providesFactoryB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FactoryB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注:</p><ol><li>@Binds注解用于module中的抽象方法，这个方法的参数应该是具体实现类，返回值应该是抽象类，它高速Dagger2在自动生成的代码中注入抽象类引用对象时，应该使用哪一个具体实现类作为实例被获取</li><li>在使用抽象类作为module时，获取实例对象的方法只能使用static静态方法</li></ol><h3 id="Named"><a href="#Named" class="headerlink" title="@Named"></a>@Named</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Binds</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Factory <span class="title">bindsFactory</span><span class="params">(FactoryA factoryA)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Binds</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Factory <span class="title">bindsFactory</span><span class="params">(FactoryB factoryB)</span></span>;</span><br></pre></td></tr></table></figure><p>以上代码, 返回多个同一类的实例时, Dagger2 无法仅仅通过返回类型来判断是调用哪个方法创建实例时,就需要使用 @Named 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"factoryA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Factory <span class="title">bindsFactory</span><span class="params">(FactoryA factoryA)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"factoryB"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Factory <span class="title">bindsFactory</span><span class="params">(FactoryB factoryB)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"factoryA"</span>)</span><br><span class="line">Factory factory;</span><br></pre></td></tr></table></figure></p><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>将App中的单例对象同样注入到MainActivity中, 需使用 dependencies</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;MainModule.class&#125;, dependencies = &#123;AppComponent.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这里依赖之后会产生一个小问题，就是存在依赖关系的组件的作用域标记不能相同，因为在AppComponent中我们标记了@Singleton，因此在这里我们自定义了新的@Scope，即@ActivityScope</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>并且,在构建 MainComponent 实例时,需要传进 AppComponent 实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Factory mFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        MainComponent mainComponent = DaggerMainComponent</span><br><span class="line">                .builder()</span><br><span class="line">                <span class="comment">//这里传入appComponent实例，我们可以通过application获取到</span></span><br><span class="line">                .appComponent(((App) getApplication()).getAppComponent())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后，我们需要给AppComponent接口添加一个方法，用来提供其所持有的单例对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AppModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(App app)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Factory <span class="title">factory</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy</h3><p>懒加载机制, 需要它在真正被使用时才被实例化，那么你可以使用Lazy，这里以Product为例，代码修改如下即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Lazy&lt;Product&gt; mProduct;</span><br><span class="line"></span><br><span class="line">Product product = mProduct.get();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在-Gradle-中的使用&quot;&gt;&lt;a href=&quot;#在-Gradle-中的使用&quot; class=&quot;headerlink&quot; title=&quot;在 Gradle 中的使用&quot;&gt;&lt;/a&gt;在 Gradle 中的使用&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation &lt;span class=&quot;string&quot;&gt;&#39;com.google.dagger:dagger:2.4&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;annotationProcessor &lt;span class=&quot;string&quot;&gt;&#39;com.google.dagger:dagger-compiler:2.4&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//java注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &lt;span class=&quot;string&quot;&gt;&#39;org.glassfish:javax.annotation:10.0-b28&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainPresenter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IPresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IView view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 被注入对象的构造函数中添加 @Inject (方式2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainPresenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IView view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.view = view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IView view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainModule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IView view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.view = view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在 Module 中提供被注入的对象(或构建该对象所需的参数) (方式1(优先))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 需要添加 @Provides 注解, 方法名为 provideXXX()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;IView &lt;span class=&quot;title&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注入器, 被注入的对象(MainPresenter)和注入的类(MainActivity)的桥梁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;(modules = MainModule.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MainActivity activity)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IView&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用 @Inject 注入 MainPresenter 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MainPresenter presenter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; Make Project 生成相应的注解类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DaggerMainComponent.builder().mainModule(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MainModule(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)).build()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .inject(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        presenter.getData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Dagger2" scheme="http://yoursite.com/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>android 无线调试</title>
    <link href="http://yoursite.com/2019/10/08/android-%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2019/10/08/android-无线调试/</id>
    <published>2019-10-08T13:35:32.000Z</published>
    <updated>2019-11-06T14:19:50.219Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Android Wifi ADB 插件</p><p><img src="/images/Android_Wifi_ADB.png" alt="Android Wifi ADB"></p><ol><li>安装以上插件,并重启 AS</li><li>将手机连接至电脑,并确保电脑和手机在同一个网络下</li><li>打开命令行,输入 adb tcpip 5555</li></ol><p>然后就可以进行远程调试了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Android Wifi ADB 插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Android_Wifi_ADB.png&quot; alt=&quot;Android Wifi ADB&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装以上插件,并重启 AS&lt;/li&gt;
&lt;li&gt;将手机连接至电
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android Wifi ADB" scheme="http://yoursite.com/tags/Android-Wifi-ADB/"/>
    
  </entry>
  
  <entry>
    <title>android 源码下载及编译</title>
    <link href="http://yoursite.com/2019/03/24/android-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2019/03/24/android-源码下载及编译/</id>
    <published>2019-03-24T10:40:50.000Z</published>
    <updated>2019-03-24T10:46:49.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-源码下载"><a href="#Android-源码下载" class="headerlink" title="Android 源码下载"></a>Android 源码下载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:<span class="variable">$PATH</span></span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line"><span class="comment"># 如果上述 URL 不可访问，可以用下面的：</span></span><br><span class="line"><span class="comment"># curl -sSL  'https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT' |base64 -d &gt; ~/bin/repo</span></span><br><span class="line">chmod a+x ~/bin/repo</span><br><span class="line"></span><br><span class="line">mkdir WORKING_DIRECTORY</span><br><span class="line"><span class="built_in">cd</span> WORKING_DIRECTORY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化仓库： </span></span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest</span><br><span class="line"><span class="comment"># 如果提示无法连接到 gerrit.googlesource.com，可以编辑 ~/bin/repo，把 REPO_URL 一行替换成下面的：</span></span><br><span class="line"><span class="comment"># REPO_URL = 'https://gerrit-googlesource.proxy.ustclug.org/git-repo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要某个特定的 Android 版本（Android 版本列表）：</span></span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-4.0.1_r1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步源码树（以后只需执行这条命令来同步）：</span></span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure><h1 id="Android-源码编译"><a href="#Android-源码编译" class="headerlink" title="Android 源码编译"></a>Android 源码编译</h1><p><a href="https://www.jianshu.com/p/367f0886e62b" target="_blank" rel="noopener">自己动手编译Android源码(超详细)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-源码下载&quot;&gt;&lt;a href=&quot;#Android-源码下载&quot; class=&quot;headerlink&quot; title=&quot;Android 源码下载&quot;&gt;&lt;/a&gt;Android 源码下载&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="repo" scheme="http://yoursite.com/tags/repo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hide掉的类及接口</title>
    <link href="http://yoursite.com/2019/03/24/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hide%E6%8E%89%E7%9A%84%E7%B1%BB%E5%8F%8A%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/03/24/如何使用hide掉的类及接口/</id>
    <published>2019-03-24T10:35:09.000Z</published>
    <updated>2019-03-24T10:47:53.527Z</updated>
    
    <content type="html"><![CDATA[<p>在做蓝牙电话的时候，发现有的类或者api是被 @hide 掉的，例如 BluetoothPbapClient.java 没法调用。<br>最正确的方法应该是自己修改定制源码，再编译使用。但是如果仅是测试用，可以继续考虑使用 hide 的类及接口，这里做个简单的总结。</p><h1 id="不能访问的类或者接口"><a href="#不能访问的类或者接口" class="headerlink" title="不能访问的类或者接口"></a>不能访问的类或者接口</h1><p>Android 有两种类型的 API 不能通过 SDK 访问。一种是在 com.android.internal 包中的 API(源码路径为framework/base/core/)。另一种是被标记为 @hide 属性的类和接口。</p><p>对于internal API来说，从来都没有计划将其开放出来。它就是Android的“内部厨房”，对开发者来说，应该将其视作黑盒。</p><p>Hidden API之所以被隐藏，是想阻止开发者使用SDK中那些未完成或不稳定的部分（接口或类），因为其可能会在后续的版本中被修改或者移除。</p><p>当使用 Android SDK 进行开发的时候，应用默认引用了 android.jar，它位于 sdk-platform-{android版本}-android.jar。SDK 中默认移除了所有的被@hide标识的接口或者类以及 internal 包下的类。</p><p>当应用在设备上运行时，它会加载 framework.jar。简单来说，framework.jar 和 android.jar 等同，但是没有移除 internal API 和 hidden API。</p><a id="more"></a><h1 id="解决方案1：反射"><a href="#解决方案1：反射" class="headerlink" title="解决方案1：反射"></a>解决方案1：反射</h1><p>可以通过反射调到hide的类或者接口，这方面使用之前已经有介绍了：</p><p><a href="https://mcl-123.github.io/2019/03/15/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">反射机制原理及使用</a></p><h1 id="解决方案2：原始-android-jar"><a href="#解决方案2：原始-android-jar" class="headerlink" title="解决方案2：原始 android.jar"></a>解决方案2：原始 android.jar</h1><p>我们需要修改android.jar，这样它才能包含所有的*.class文件（包括internal和hidden API类）。有两种办法：</p><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>Android是一个开源工程。我们可以下载源码并搭建编译环境，这样它就不能移除那些internal和hidden的类了。</p><h2 id="从模拟器中提取"><a href="#从模拟器中提取" class="headerlink" title="从模拟器中提取"></a>从模拟器中提取</h2><p>每个模拟器或真机在运行时都会有一个等同android.jar的东西。我们可以从这里拿到jar文件，提取出原始的.class文件，并拷贝到Android SDK的android.jar中。</p><p>具体步骤可以看这里：<a href="https://blog.csdn.net/hudan2714/article/details/7853908" target="_blank" rel="noopener">android怎样调用@hide和internal API</a></p><h2 id="android-hidden-api"><a href="#android-hidden-api" class="headerlink" title="android-hidden-api"></a>android-hidden-api</h2><p>GitHub 上有一个项目：<a href="https://github.com/anggrayudi/android-hidden-api" target="_blank" rel="noopener">android-hidden-api</a>，里面提供了众多版本完整的 android.jar 包</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在开发中使用隐藏 API 和内部 API 是不推荐的做法，因为在后续版本中很可能大改动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做蓝牙电话的时候，发现有的类或者api是被 @hide 掉的，例如 BluetoothPbapClient.java 没法调用。&lt;br&gt;最正确的方法应该是自己修改定制源码，再编译使用。但是如果仅是测试用，可以继续考虑使用 hide 的类及接口，这里做个简单的总结。&lt;/p&gt;
&lt;h1 id=&quot;不能访问的类或者接口&quot;&gt;&lt;a href=&quot;#不能访问的类或者接口&quot; class=&quot;headerlink&quot; title=&quot;不能访问的类或者接口&quot;&gt;&lt;/a&gt;不能访问的类或者接口&lt;/h1&gt;&lt;p&gt;Android 有两种类型的 API 不能通过 SDK 访问。一种是在 com.android.internal 包中的 API(源码路径为framework/base/core/)。另一种是被标记为 @hide 属性的类和接口。&lt;/p&gt;
&lt;p&gt;对于internal API来说，从来都没有计划将其开放出来。它就是Android的“内部厨房”，对开发者来说，应该将其视作黑盒。&lt;/p&gt;
&lt;p&gt;Hidden API之所以被隐藏，是想阻止开发者使用SDK中那些未完成或不稳定的部分（接口或类），因为其可能会在后续的版本中被修改或者移除。&lt;/p&gt;
&lt;p&gt;当使用 Android SDK 进行开发的时候，应用默认引用了 android.jar，它位于 sdk-platform-{android版本}-android.jar。SDK 中默认移除了所有的被@hide标识的接口或者类以及 internal 包下的类。&lt;/p&gt;
&lt;p&gt;当应用在设备上运行时，它会加载 framework.jar。简单来说，framework.jar 和 android.jar 等同，但是没有移除 internal API 和 hidden API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="hide" scheme="http://yoursite.com/tags/hide/"/>
    
      <category term="framework" scheme="http://yoursite.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙电话apk的实现及源码分析</title>
    <link href="http://yoursite.com/2019/03/20/%E8%93%9D%E7%89%99%E7%94%B5%E8%AF%9Dapk%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/03/20/蓝牙电话apk的实现及源码分析/</id>
    <published>2019-03-20T12:50:51.000Z</published>
    <updated>2019-03-20T12:54:48.954Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍了<a href="https://mcl-123.github.io/2019/03/16/%E8%93%9D%E7%89%99%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">蓝牙基本功能实现（开启，扫描，配对，连接等）</a>, 在这里继续介绍蓝牙电话 apk 的实现，及相关源码的分析。</p><a id="more"></a><h1 id="蓝牙电话apk实现"><a href="#蓝牙电话apk实现" class="headerlink" title="蓝牙电话apk实现"></a>蓝牙电话apk实现</h1><p>只需要两步：</p><ol><li>注册 BluetoothHeadsetClientCall 相关广播监听来电/接通/挂断的状态，获取蓝牙电话的相关信息，比如号码、设备信息等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">BroadcastReceiver broadcastReceiver = <span class="keyword">new</span> BroadcastReceiver()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context arg0, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// hide掉了</span></span><br><span class="line">        <span class="keyword">if</span>(intent.getAction().equals(BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED))&#123;<span class="comment">// 连接远程设备广播 </span></span><br><span class="line">             <span class="comment">// 0:disconneted 1:connecting 2:connected 3:disconnecting</span></span><br><span class="line">             <span class="keyword">int</span> state = intent.getIntExtra(BluetoothProfile.EXTRA_STATE, -<span class="number">1</span>);</span><br><span class="line">             Log.e(TAG,<span class="string">"ACTION_CONNECTION_STATE_CHANGED:: state = "</span> + String.valueOf(state) + <span class="string">"\n"</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(BluetoothHeadsetClient.ACTION_CALL_CHANGED))&#123;<span class="comment">// 接通状态广播：来电、去电、挂断等</span></span><br><span class="line">             Log.e(TAG,<span class="string">" action = BluetoothHeadsetClient.ACTION_CALL_CHANGED"</span>);</span><br><span class="line">             Object state = intent.getExtra(BluetoothHeadsetClient.EXTRA_CALL);<span class="comment">// 注：getExtra()返回Object类型</span></span><br><span class="line">             BluetoothHeadsetClientCall ss = (BluetoothHeadsetClientCall)state;<span class="comment">// 类型转换</span></span><br><span class="line">             Log.e(TAG,<span class="string">" Object = "</span> + String.valueOf(state));</span><br><span class="line">             Log.e(TAG,<span class="string">"ss.mId = "</span> + String.valueOf(ss.getId()));</span><br><span class="line">             <span class="comment">/*state:: CALL_STATE_ACTIVE =0; CALL_STATE_HELD = 1; CALL_STATE_DIALING =2*/</span></span><br><span class="line">             Log.e(TAG,<span class="string">"ss.mState = "</span> + String.valueOf(ss.getState()));<span class="comment">// 获取来电/去电/接通/挂断等状态</span></span><br><span class="line">             Log.e(TAG,<span class="string">"ss.mNumber = "</span> + String.valueOf(ss.getNumber()));<span class="comment">// 获取来电/去电的电话号码</span></span><br><span class="line">             Log.e(TAG,<span class="string">" ss.mOutgoing = "</span> + String.valueOf(ss.isOutgoing()));</span><br><span class="line">             Log.e(TAG,<span class="string">"ss.mMultiParty = "</span> + String.valueOf(ss.isMultiParty()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(BluetoothHeadsetClient.ACTION_AUDIO_STATE_CHANGED))&#123;<span class="comment">// 音频流接通或断开广播</span></span><br><span class="line">             Log.e(TAG,<span class="string">" action = BluetoothHeadsetClient.ACTION_AUDIO_STATE_CHANGED"</span>);</span><br><span class="line">             <span class="comment">// state: 0:audio disconnected; 1:conneting; 2:connected</span></span><br><span class="line">             <span class="keyword">int</span> state = intent.getIntExtra(BluetoothProfile.EXTRA_STATE, -<span class="number">1</span>); </span><br><span class="line">             Log.e(TAG,<span class="string">"ACTION_AUDIO_STATE_CHANGED:: state = "</span> + String.valueOf(state));  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    filter.addAction(BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED);</span><br><span class="line">    filter.addAction(BluetoothHeadsetClient.ACTION_CALL_CHANGED);</span><br><span class="line">    filter.addAction(BluetoothHeadsetClient.ACTION_AUDIO_STATE_CHANGED);</span><br><span class="line">    registerReceiver(broadcastReceiver, filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 BluetoothAdapter 获取并且初始化 BluetoothHeadsetClient 对象，然后就可以调用 api：<br> dial()/acceptCall()/rejectCall()/terminateCall()方法进行拨号/接通/拒接的操作了。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bluetoothAdapter.getProfileProxy(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> BluetoothProfile.ServiceListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(<span class="keyword">int</span> profile, BluetoothProfile proxy)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接后，拿到蓝牙电话客户端的代理 mHeadsetClient </span></span><br><span class="line">        <span class="comment">// Api 接口： IBluetoothHeadsetClient.aidl</span></span><br><span class="line">        mHeadsetClient = (BluetoothHeadsetClient) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(<span class="keyword">int</span> profile)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BluetoothProfile.HEADSET);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给110打电话</span></span><br><span class="line">mHeadsetClient.dial(mDevice, <span class="string">"110"</span>)</span><br></pre></td></tr></table></figure><h1 id="蓝牙电话-Api-相关源码分析"><a href="#蓝牙电话-Api-相关源码分析" class="headerlink" title="蓝牙电话 Api 相关源码分析"></a>蓝牙电话 Api 相关源码分析</h1><p>路径1: frameworks\base\core\java\android\bluetooth\  </p><p>蓝牙相关接口,蓝牙各种功能的发起点。</p><p>路径2:packages\apps\Bluetooth\src\com\android\bluetooth\  </p><p>独立的Bluetooth.apk,里面包含蓝牙相关的各种服务,是java层和C/C++层的桥梁。</p><p>路径3: packages\apps\Bluetooth\jni\</p><p>调用底层C/C++实现各种蓝牙功能,并且反馈给java层。</p><h2 id="蓝牙协议"><a href="#蓝牙协议" class="headerlink" title="蓝牙协议"></a>蓝牙协议</h2><ul><li><p>a2dp: 和蓝牙耳机,音频有关,比如听歌等。</p></li><li><p>avrcp: 音频/视频通过连接的蓝牙控制,比如放歌时控制暂停等。</p></li><li><p>gatt：低功耗BLE有关,比如蓝牙按键。</p></li><li><p>hdp: 蓝牙医疗有关</p></li><li><p>hfp和hfpclient : 蓝牙通话有关,比如蓝牙通话的相关操作</p></li><li><p>hid: 蓝牙键盘键盘/鼠标</p></li><li><p>map: 同步蓝牙短信相关</p></li><li><p>opp: 蓝牙传输,比如传输文件等</p></li><li><p>pan: 个人局域网</p></li><li><p>pbap: 同步电话本,比如联系人/通话记录等</p></li><li><p>sap : 蓝牙通话,主要和SIM卡相关</p></li><li><p>sdp: 蓝牙服务发现/获取相关</p></li></ul><p>这12个包分别实现了12中蓝牙功能,大多数以服务的形式存在,运行在 Bluetooth.apk 中。不仅如此,还具有以下特点:</p><p>1,每一个服务相互独立,互相毫无任何影响, 继承自 ProfileService,由 AdapterService 服务统一管理。</p><p>2,每一个服务在路径1中都存在对应的客户端类,通过Binder进行跨进程通信。</p><p>3,每一个服务在路径3中都存在对应的C/C++类,通过JNI机制互相调用。</p><p>4,每一个服务的启动,对应的Binder以及JNI机制的调用原理,方法,流程几乎都是一样的。</p><h2 id="通过蓝牙获取通讯录及通话记录"><a href="#通过蓝牙获取通讯录及通话记录" class="headerlink" title="通过蓝牙获取通讯录及通话记录"></a>通过蓝牙获取通讯录及通话记录</h2><p>路径：android-8.0.0_r1\frameworks\base\core\java\android\bluetooth</p><p>Pbap 协议：通过 Pbap(Phone Book Access Profile) 协议同步联系人/通话记录</p><p>BluetoothPbapClient.java:</p><p>该类是 @hide，可以通过修改源码重新编译，或者通过反射的方式获取此类的对象，，但应该是尚不成熟的，所以在此仅做简单学习用吧。</p><p>注：使用反射时，我的一加6手机发现该类的构造函数不存在，应该是被阉割了。在 Hikey970 板子上测试是ok的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a BluetoothPbapClient proxy object.</span></span><br><span class="line">BluetoothPbapClient(Context context, ServiceListener l) &#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mServiceListener = l;</span><br><span class="line">    mAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">    IBluetoothManager mgr = mAdapter.getBluetoothManager();</span><br><span class="line">    <span class="keyword">if</span> (mgr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mgr.registerStateChangeCallback(mBluetoothStateChangeCallback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">""</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    doBind();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upon successful connection to remote PBAP server the Client will attempt to automatically download the users phonebook and call log</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(BluetoothDevice device)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> IBluetoothPbapClient service = mService;</span><br><span class="line">    <span class="keyword">if</span> (service != <span class="keyword">null</span> &amp;&amp; isEnabled() &amp;&amp; isValidDevice(device)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> service.connect(device);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, Log.getStackTraceString(<span class="keyword">new</span> Throwable()));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝牙电话API调用"><a href="#蓝牙电话API调用" class="headerlink" title="蓝牙电话API调用"></a>蓝牙电话API调用</h2><p>主要类：</p><p>BluetoothHeadsetClient.java 主要负责蓝牙通话的相关动作,比如接听等等</p><p>BluetoothHeadsetClientCall.java 主要负责蓝牙通话的状态,比如是来电还是去电等等。</p><p>HeadsetClientHalConstants.java 类里面只是定义了一些 int/boolean 类型的值。</p><p>HeadsetClientService.java 从名字就知道它是一个服务,里面还有一个BluetoothHeadsetClientBinder内部类,该内部类主要负责和 BluetoothHeadsetClient 进行跨进程通信。另外, HeadsetClientService 也是 BluetoothHeadsetClientBinder 和 HeadsetClientStateMachine 之间的桥梁。</p><p>HeadsetClientStateMachine 是一个状态机,即管理连接的状态也是通话时 java 和 C/C++ 之间的桥梁,通过 JNI 机制和 com_android_bluetooth_hfpclient 里面的方法互相调用。</p><p>com_android_bluetooth_hfpclient  蓝牙通话动作,拨号/接听/挂断/拒接 实际的执行者。</p><h3 id="打电话"><a href="#打电话" class="headerlink" title="打电话"></a>打电话</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置蓝牙电话客户端监听</span></span><br><span class="line">bluetoothAdapter.getProfileProxy(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> BluetoothProfile.ServiceListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(<span class="keyword">int</span> profile, BluetoothProfile proxy)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接后，拿到蓝牙电话客户端的代理 mHeadsetClient </span></span><br><span class="line">        <span class="comment">// Api 接口： IBluetoothHeadsetClient.aidl</span></span><br><span class="line">        mHeadsetClient = (BluetoothHeadsetClient) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(<span class="keyword">int</span> profile)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BluetoothProfile.HEADSET);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给110打电话</span></span><br><span class="line">mHeadsetClient.dial(mDevice, <span class="string">"110"</span>)</span><br><span class="line"></span><br><span class="line">BluetoothHeadsetClient.java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BluetoothHeadsetClientCall <span class="title">dial</span><span class="params">(BluetoothDevice device, String number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> IBluetoothHeadsetClient service = mService;</span><br><span class="line">    <span class="keyword">return</span> service.dial(device, number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们获取得到一个BluetoothHeadsetClient时，会调用 BluetoothHeadsetClient 的构造函数，它会执行一个doBind()</span></span><br><span class="line">BluetoothHeadsetClient(Context context, ServiceListener l) &#123;</span><br><span class="line">    doBind();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">doBind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(IBluetoothHeadsetClient.class.getName());</span><br><span class="line">    ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), <span class="number">0</span>);</span><br><span class="line">    intent.setComponent(comp);</span><br><span class="line">    <span class="keyword">if</span> (comp == <span class="keyword">null</span> || !mContext.bindServiceAsUser(intent, mConnection, <span class="number">0</span>, mContext.getUser())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className, IBinder service)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// private volatile IBluetoothHeadsetClient mService;</span></span><br><span class="line">        mService = IBluetoothHeadsetClient.Stub.asInterface(Binder.allowBlocking(service));</span><br><span class="line">        mServiceListener.onServiceConnected(BluetoothProfile.HEADSET_CLIENT,</span><br><span class="line">                BluetoothHeadsetClient.<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得一个IBluetoothHeadsetClient 对象时，系统会去绑定一个服务，并获取这个服务的代理，而这个服务才是真正实现打电话的地方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 该服务的实现在立即实现： HeadsetClientService</span></span><br><span class="line">HeadsetClientService.java:</span><br><span class="line"></span><br><span class="line"><span class="function">BluetoothHeadsetClientCall <span class="title">dial</span><span class="params">(BluetoothDevice device, String number)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 安卓中的状态机</span></span><br><span class="line">    HeadsetClientStateMachine sm = getStateMachine(device);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> connectionState = sm.getConnectionState(device);</span><br><span class="line"></span><br><span class="line">    BluetoothHeadsetClientCall call = <span class="keyword">new</span> BluetoothHeadsetClientCall(</span><br><span class="line">        device, HeadsetClientStateMachine.HF_ORIGINATED_CALL_ID,</span><br><span class="line">        BluetoothHeadsetClientCall.CALL_STATE_DIALING, number, <span class="keyword">false</span>  <span class="comment">/* multiparty */</span>,</span><br><span class="line">        <span class="keyword">true</span>  <span class="comment">/* outgoing */</span>);</span><br><span class="line">    Message msg = sm.obtainMessage(HeadsetClientStateMachine.DIAL_NUMBER);</span><br><span class="line">    msg.obj = call;</span><br><span class="line">    sm.sendMessage(msg);</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeadsetClientStateMachine.java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message.what) &#123;</span><br><span class="line">        <span class="keyword">case</span> DIAL_NUMBER:</span><br><span class="line">            <span class="comment">// Add the call as an outgoing call.</span></span><br><span class="line">            BluetoothHeadsetClientCall c = (BluetoothHeadsetClientCall) message.obj;</span><br><span class="line">            mCalls.put(HF_ORIGINATED_CALL_ID, c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最终实现打电话的方法是 dialNative()， 一个本地方法</span></span><br><span class="line">            <span class="comment">// 接听拒接等同理</span></span><br><span class="line">            <span class="keyword">if</span> (NativeInterface.dialNative(getByteAddress(mCurrentDevice), c.getNumber())) &#123;</span><br><span class="line">                addQueuedAction(DIAL_NUMBER, c.getNumber());</span><br><span class="line">                <span class="comment">// Start looping on calling current calls.</span></span><br><span class="line">                sendMessage(QUERY_CURRENT_CALLS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HANDLED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接听电话"><a href="#接听电话" class="headerlink" title="接听电话"></a>接听电话</h3><p>如果有来电,服务端手机接通电话或者对方挂断电话,我们怎么知道呢？这些都是 com_android_bluetooth_hfpclient.cpp 通过 JNI 机制调用通话状态机的方法 sendCallChangedIntent,将电话的状态(包含在 BluetoothHeadsetClientCall.java 中)通过广播发送出来,第三方apk监听状态就可以进行相应的操作了。</p><p>HeadsetClientStateMachine.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendCallChangedIntent</span><span class="params">(BluetoothHeadsetClientCall c)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(BluetoothHeadsetClient.ACTION_CALL_CHANGED);</span><br><span class="line">    intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);</span><br><span class="line">    intent.putExtra(BluetoothHeadsetClient.EXTRA_CALL, c);</span><br><span class="line">    mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Car-模块拨打电话"><a href="#Car-模块拨打电话" class="headerlink" title="Car 模块拨打电话"></a>Car 模块拨打电话</h2><p>Android 7.0 增加车载新特性，在Car模块中实现了蓝牙电话功能</p><p>路径： android-8.0.0_r1\packages\apps\Car\Dialer\src\com\android\car\dialer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DialerFragment.java：</span><br><span class="line"></span><br><span class="line">callButton.setOnClickListener((unusedView) -&gt; &#123;</span><br><span class="line">    getUiCallManager().safePlaceCall(mNumber.toString(), <span class="keyword">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">UiCallManager.java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">safePlaceCall</span><span class="params">(String number, <span class="keyword">boolean</span> bluetoothRequired)</span> </span>&#123;</span><br><span class="line">    placeCall(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TelecomUiCallManager.java:</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeCall</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">    Uri uri = Uri.fromParts(<span class="string">"tel"</span>, number, <span class="keyword">null</span>);</span><br><span class="line">    mTelecomManager.placeCall(uri, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TelecomManager.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeCall</span><span class="params">(Uri address, Bundle extras)</span> </span>&#123;</span><br><span class="line">    ITelecomService service = getTelecomService();</span><br><span class="line">    service.placeCall(address, extras == <span class="keyword">null</span> ? <span class="keyword">new</span> Bundle() : extras,</span><br><span class="line">            mContext.getOpPackageName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ITelecomService <span class="title">getTelecomService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ITelecomService.Stub.asInterface(ServiceManager.getService(Context.TELECOM_SERVICE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TelecomService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getTelecomSystem().getLock()) &#123;</span><br><span class="line">        <span class="keyword">return</span> getTelecomSystem().getTelecomServiceImpl().getBinder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TelecomServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeCall</span><span class="params">(Uri handle, Bundle extras, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> UserHandle userHandle = Binder.getCallingUserHandle();</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL, handle);</span><br><span class="line">    <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">        extras.setDefusable(<span class="keyword">true</span>);</span><br><span class="line">        intent.putExtras(extras);</span><br><span class="line">    &#125;</span><br><span class="line">    mUserCallIntentProcessorFactory.create(mContext, userHandle)</span><br><span class="line">            .processIntent(</span><br><span class="line">                    intent, callingPackage, isSelfManaged ||</span><br><span class="line">                            (hasCallAppOp &amp;&amp; hasCallPermission));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserCallIntentProcessor.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processIntent</span><span class="params">(Intent intent, String callingPackageName,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> canCallNonEmergency)</span> </span>&#123;</span><br><span class="line">    processOutgoingCallIntent(intent, callingPackageName, canCallNonEmergency);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processOutgoingCallIntent</span><span class="params">(Intent intent, String callingPackageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> canCallNonEmergency)</span> </span>&#123;</span><br><span class="line">    intent.putExtra(CallIntentProcessor.KEY_INITIATING_USER, mUserHandle);</span><br><span class="line">    sendBroadcastToReceiver(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrimaryCallReceiver.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">    getTelecomSystem().getCallIntentProcessor().processIntent(intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TelecomSystem <span class="title">getTelecomSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> TelecomSystem.getInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CallIntentProcessor.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    processOutgoingCallIntent(mContext, mCallsManager, intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processOutgoingCallIntent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">            CallsManager callsManager,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Send to CallsManager to ensure the InCallUI gets kicked off before the broadcast returns</span></span><br><span class="line">    Call call = callsManager</span><br><span class="line">            .startOutgoingCall(handle, phoneAccountHandle, clientExtras, initiatingUser,</span><br><span class="line">                    intent);</span><br><span class="line">    sendNewOutgoingCallIntent(context, call, callsManager, intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendNewOutgoingCallIntent</span><span class="params">(Context context, Call call, CallsManager callsManager,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Asynchronous calls should not usually be made inside a BroadcastReceiver because once</span></span><br><span class="line">    <span class="comment">// onReceive is complete, the BroadcastReceiver's process runs the risk of getting</span></span><br><span class="line">    <span class="comment">// killed if memory is scarce. However, this is OK here because the entire Telecom</span></span><br><span class="line">    <span class="comment">// process will be running throughout the duration of the phone call and should never</span></span><br><span class="line">    <span class="comment">// be killed.</span></span><br><span class="line">    NewOutgoingCallIntentBroadcaster broadcaster = <span class="keyword">new</span> NewOutgoingCallIntentBroadcaster(</span><br><span class="line">            context, callsManager, call, intent, callsManager.getPhoneNumberUtilsAdapter(),</span><br><span class="line">            isPrivilegedDialer);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> result = broadcaster.processIntent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewOutgoingCallBroadcastIntentReceiver.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">processIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = mIntent;</span><br><span class="line">    String action = intent.getAction();</span><br><span class="line">    <span class="keyword">final</span> Uri handle = intent.getData();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(<span class="keyword">this</span>, <span class="string">"Empty handle obtained from the call intent."</span>);</span><br><span class="line">        <span class="keyword">return</span> DisconnectCause.INVALID_NUMBER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isVoicemailNumber = PhoneAccount.SCHEME_VOICEMAIL.equals(handle.getScheme());</span><br><span class="line">    <span class="keyword">if</span> (isVoicemailNumber) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_CALL.equals(action)</span><br><span class="line">                || Intent.ACTION_CALL_PRIVILEGED.equals(action)) &#123;</span><br><span class="line">            <span class="comment">// Voicemail calls will be handled directly by the telephony connection manager</span></span><br><span class="line">            Log.i(<span class="keyword">this</span>, <span class="string">"Placing call immediately instead of waiting for "</span></span><br><span class="line">                    + <span class="string">" OutgoingCallBroadcastReceiver: %s"</span>, intent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Since we are not going to go through "Outgoing call broadcast", make sure</span></span><br><span class="line">            <span class="comment">// we mark it as ready.</span></span><br><span class="line">            mCall.setNewOutgoingCallIntentBroadcastIsDone();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> speakerphoneOn = mIntent.getBooleanExtra(</span><br><span class="line">                    TelecomManager.EXTRA_START_CALL_WITH_SPEAKERPHONE, <span class="keyword">false</span>);</span><br><span class="line">            mCallsManager.placeOutgoingCall(mCall, handle, <span class="keyword">null</span>, speakerphoneOn,</span><br><span class="line">                    VideoProfile.STATE_AUDIO_ONLY);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> DisconnectCause.NOT_DISCONNECTED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.i(<span class="keyword">this</span>, <span class="string">"Unhandled intent %s. Ignoring and not placing call."</span>, intent);</span><br><span class="line">            <span class="keyword">return</span> DisconnectCause.OUTGOING_CANCELED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String number = mPhoneNumberUtilsAdapter.getNumberFromIntent(intent, mContext);</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(number)) &#123;</span><br><span class="line">        Log.w(<span class="keyword">this</span>, <span class="string">"Empty number obtained from the call intent."</span>);</span><br><span class="line">        <span class="keyword">return</span> DisconnectCause.NO_PHONE_NUMBER_SUPPLIED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isUriNumber = mPhoneNumberUtilsAdapter.isUriNumber(number);</span><br><span class="line">    <span class="keyword">if</span> (!isUriNumber) &#123;</span><br><span class="line">        number = mPhoneNumberUtilsAdapter.convertKeypadLettersToDigits(number);</span><br><span class="line">        number = mPhoneNumberUtilsAdapter.stripSeparators(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPotentialEmergencyNumber = isPotentialEmergencyNumber(number);</span><br><span class="line">    Log.v(<span class="keyword">this</span>, <span class="string">"isPotentialEmergencyNumber = %s"</span>, isPotentialEmergencyNumber);</span><br><span class="line"></span><br><span class="line">    rewriteCallIntentAction(intent, isPotentialEmergencyNumber);</span><br><span class="line">    action = intent.getAction();</span><br><span class="line">    <span class="comment">// True for certain types of numbers that are not intended to be intercepted or modified</span></span><br><span class="line">    <span class="comment">// by third parties (e.g. emergency numbers).</span></span><br><span class="line">    <span class="keyword">boolean</span> callImmediately = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Intent.ACTION_CALL.equals(action)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPotentialEmergencyNumber) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mIsDefaultOrSystemPhoneApp) &#123;</span><br><span class="line">                Log.w(<span class="keyword">this</span>, <span class="string">"Cannot call potential emergency number %s with CALL Intent %s "</span></span><br><span class="line">                        + <span class="string">"unless caller is system or default dialer."</span>, number, intent);</span><br><span class="line">                launchSystemDialer(intent.getData());</span><br><span class="line">                <span class="keyword">return</span> DisconnectCause.OUTGOING_CANCELED;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callImmediately = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Intent.ACTION_CALL_EMERGENCY.equals(action)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPotentialEmergencyNumber) &#123;</span><br><span class="line">            Log.w(<span class="keyword">this</span>, <span class="string">"Cannot call non-potential-emergency number %s with EMERGENCY_CALL "</span></span><br><span class="line">                    + <span class="string">"Intent %s."</span>, number, intent);</span><br><span class="line">            <span class="keyword">return</span> DisconnectCause.OUTGOING_CANCELED;</span><br><span class="line">        &#125;</span><br><span class="line">        callImmediately = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.w(<span class="keyword">this</span>, <span class="string">"Unhandled Intent %s. Ignoring and not placing call."</span>, intent);</span><br><span class="line">        <span class="keyword">return</span> DisconnectCause.INVALID_NUMBER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callImmediately) &#123;</span><br><span class="line">        Log.i(<span class="keyword">this</span>, <span class="string">"Placing call immediately instead of waiting for "</span></span><br><span class="line">                + <span class="string">" OutgoingCallBroadcastReceiver: %s"</span>, intent);</span><br><span class="line">        String scheme = isUriNumber ? PhoneAccount.SCHEME_SIP : PhoneAccount.SCHEME_TEL;</span><br><span class="line">        <span class="keyword">boolean</span> speakerphoneOn = mIntent.getBooleanExtra(</span><br><span class="line">                TelecomManager.EXTRA_START_CALL_WITH_SPEAKERPHONE, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">int</span> videoState = mIntent.getIntExtra(</span><br><span class="line">                TelecomManager.EXTRA_START_CALL_WITH_VIDEO_STATE,</span><br><span class="line">                VideoProfile.STATE_AUDIO_ONLY);</span><br><span class="line">        mCallsManager.placeOutgoingCall(mCall, Uri.fromParts(scheme, number, <span class="keyword">null</span>), <span class="keyword">null</span>,</span><br><span class="line">                speakerphoneOn, videoState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don't return but instead continue and send the ACTION_NEW_OUTGOING_CALL broadcast</span></span><br><span class="line">        <span class="comment">// so that third parties can still inspect (but not intercept) the outgoing call. When</span></span><br><span class="line">        <span class="comment">// the broadcast finally reaches the OutgoingCallBroadcastReceiver, we'll know not to</span></span><br><span class="line">        <span class="comment">// initiate the call again because of the presence of the EXTRA_ALREADY_CALLED extra.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserHandle targetUser = mCall.getInitiatingUser();</span><br><span class="line">    Log.i(<span class="keyword">this</span>, <span class="string">"Sending NewOutgoingCallBroadcast for %s to %s"</span>, mCall, targetUser);</span><br><span class="line">    broadcastIntent(intent, number, !callImmediately, targetUser);</span><br><span class="line">    <span class="keyword">return</span> DisconnectCause.NOT_DISCONNECTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CallsManager.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Call <span class="title">startOutgoingCall</span><span class="params">(Uri handle, PhoneAccountHandle phoneAccountHandle, Bundle extras,</span></span></span><br><span class="line"><span class="function"><span class="params">            UserHandle initiatingUser, Intent originalIntent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Ensure new calls related to self-managed calls/connections are set as such.  This</span></span><br><span class="line">    <span class="comment">// will be overridden when the actual connection is returned in startCreateConnection,</span></span><br><span class="line">    <span class="comment">// however doing this now ensures the logs and any other logic will treat this call as</span></span><br><span class="line">    <span class="comment">// self-managed from the moment it is created.</span></span><br><span class="line">    <span class="keyword">if</span> (account != <span class="keyword">null</span>) &#123;</span><br><span class="line">        call.setIsSelfManaged(account.isSelfManaged());</span><br><span class="line">        <span class="keyword">if</span> (call.isSelfManaged()) &#123;</span><br><span class="line">            <span class="comment">// Self-managed calls will ALWAYS use voip audio mode.</span></span><br><span class="line">            call.setIsVoipAudioMode(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    call.setInitiatingUser(initiatingUser);</span><br><span class="line">    isReusedCall = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startCreateConnection</span><span class="params">(PhoneAccountRegistrar phoneAccountRegistrar)</span> </span>&#123;</span><br><span class="line">    mCreateConnectionProcessor = <span class="keyword">new</span> CreateConnectionProcessor(<span class="keyword">this</span>, mRepository, <span class="keyword">this</span>,</span><br><span class="line">            phoneAccountRegistrar, mContext);</span><br><span class="line">    mCreateConnectionProcessor.process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CreateConnectionProcessor.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    attemptNextPhoneAccount();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attemptNextPhoneAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mService.createConnection(mCall, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终还是调用 NativeInterface.dialNative(), 同上</p><h2 id="Car-模块接听电话"><a href="#Car-模块接听电话" class="headerlink" title="Car 模块接听电话"></a>Car 模块接听电话</h2><p>android-8.0.0_r1\packages\apps\Car\Dialer\src\com\android\car\dialer\telecom\embedded</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">TelecomUiCallManager.java:</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answerCall</span><span class="params">(UiCall uiCall)</span> </span>&#123;</span><br><span class="line">    Call telecomCall = mCallList.getTelecomCall(uiCall);</span><br><span class="line">    <span class="keyword">if</span> (telecomCall != <span class="keyword">null</span>) &#123;</span><br><span class="line">        telecomCall.answer(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Call.java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answer</span><span class="params">(<span class="keyword">int</span> videoState)</span> </span>&#123;</span><br><span class="line">    mConnectionService.answer(<span class="keyword">this</span>, videoState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConnectionServiceWrapper.java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">answer</span><span class="params">(Call call, <span class="keyword">int</span> videoState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String callId = mCallIdMapper.getCallId(call);</span><br><span class="line">    <span class="keyword">if</span> (VideoProfile.isAudioOnly(videoState)) &#123;</span><br><span class="line">        mServiceInterface.answer(callId, Log.getExternalSession());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mServiceInterface.answerVideo(callId, videoState, Log.getExternalSession());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConnectionService.java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answer</span><span class="params">(String callId, Session.Info sessionInfo)</span> </span>&#123;</span><br><span class="line">    SomeArgs args = SomeArgs.obtain();</span><br><span class="line">    args.arg1 = callId;</span><br><span class="line">    args.arg2 = Log.createSubsession();</span><br><span class="line">    mHandler.obtainMessage(MSG_ANSWER, args).sendToTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_ANSWER: &#123;</span><br><span class="line">                SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">                answer((String) args.arg1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">answer</span><span class="params">(String callId)</span> </span>&#123;</span><br><span class="line">    findConnectionForAction(callId, <span class="string">"answer"</span>).onAnswer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">findConnectionForAction</span><span class="params">(String callId, String action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mConnectionById.containsKey(callId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> mConnectionById.get(callId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getNullConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InCallAdapter.java:</span><br><span class="line"></span><br><span class="line"><span class="comment">// base\telecomm\java\android\telecom\InCallAdapter.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instructs Telecom to reject the specified call.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answerCall</span><span class="params">(String callId, <span class="keyword">int</span> videoState)</span> </span>&#123;</span><br><span class="line">    mAdapter.answerCall(callId, videoState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InCallAdapter.java:</span><br><span class="line"></span><br><span class="line"><span class="comment">// packages\services\Telecomm\src\com\android\server\telecom\InCallAdapter.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answerCall</span><span class="params">(String callId, <span class="keyword">int</span> videoState)</span> </span>&#123;</span><br><span class="line">    Call call = mCallIdMapper.getCall(callId);</span><br><span class="line">    mCallsManager.answerCall(call, videoState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CallsManager.java:</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instructs Telecom to answer the specified call</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answerCall</span><span class="params">(Call call, <span class="keyword">int</span> videoState)</span> </span>&#123;</span><br><span class="line">    call.answer(videoState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Call.java:</span><br><span class="line"></span><br><span class="line"><span class="comment">// packages\services\Telecomm\src\com\android\server\telecom\Call.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answer</span><span class="params">(<span class="keyword">int</span> videoState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check to verify that the call is still in the ringing state. A call can change states</span></span><br><span class="line">    <span class="comment">// between the time the user hits 'answer' and Telecom receives the command.</span></span><br><span class="line">    <span class="keyword">if</span> (isRinging(<span class="string">"answer"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isVideoCallingSupported() &amp;&amp; VideoProfile.isVideo(videoState)) &#123;</span><br><span class="line">            videoState = VideoProfile.STATE_AUDIO_ONLY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// At this point, we are asking the connection service to answer but we don't assume</span></span><br><span class="line">        <span class="comment">// that it will work. Instead, we wait until confirmation from the connectino service</span></span><br><span class="line">        <span class="comment">// that the call is in a non-STATE_RINGING state before changing the UI. See</span></span><br><span class="line">        <span class="comment">// &#123;@link ConnectionServiceAdapter#setActive&#125; and other set* methods.</span></span><br><span class="line">        mConnectionService.answer(<span class="keyword">this</span>, videoState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终还是调用 NativeInterface.handleCallActionNative(), 同上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前介绍了&lt;a href=&quot;https://mcl-123.github.io/2019/03/16/%E8%93%9D%E7%89%99%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;蓝牙基本功能实现（开启，扫描，配对，连接等）&lt;/a&gt;, 在这里继续介绍蓝牙电话 apk 的实现，及相关源码的分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Bluetooth" scheme="http://yoursite.com/tags/Bluetooth/"/>
    
      <category term="蓝牙" scheme="http://yoursite.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>Vultr 搭建 shadowsocks 教程</title>
    <link href="http://yoursite.com/2019/03/19/Vultr-%E6%90%AD%E5%BB%BA-shadowsocks-%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/19/Vultr-搭建-shadowsocks-教程/</id>
    <published>2019-03-19T15:35:45.000Z</published>
    <updated>2020-06-22T15:20:22.664Z</updated>
    
    <content type="html"><![CDATA[<p>连不了外网，上不了谷歌的感觉很不爽，咳咳，程序猿查资料而已。网上很多教程都被和谐了，生怕以后找不到教程，所以来这记录下。<br>仅供参考。<br>科学上网。</p><a id="more"></a><p>有很多 vps 提供商，例如 vultr，搬瓦工，linode 等，价格也不等，有特价的时候只要2.5美元一个月。我目前在用的是vultr。<br>vultr 的官网可以不翻墙就访问，而类似搬瓦工等有的就不行。（Uzer 内嵌的火狐浏览器之前也是可以免费翻墙，现在不行了）。<br>架设一台 vps 成本很低，如果想换节点，随时可以关机销毁，然后再重新搭建新的 vps。</p><p>下面介绍如何基于 vultr 搭建 shadowsocks 来科学上网。</p><h1 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h1><ol><li><p>登录<a href="https://www.vultr.com/?ref=7330907" target="_blank" rel="noopener">Vultr</a>, 并注册账号。</p></li><li><p>点击左侧 Billing, 选择支付，可以通过支付宝或微信支付。<br>  <img src="/images/支付vps.jpg" alt="支付"></p></li><li><p>点击左侧 Servers, 再点击右上角加号，创建服务器。<br>  <img src="/images/创建server.png" alt="选择节点"></p></li><li><p>选择节点，我选的是 Atlanta，通过测速网站看翻墙相对快。<br>  <img src="/images/选择节点.png" alt="选择节点"></p></li><li><p>选择配置，仅个人使用的话，选最便宜的就可以了。(CentOS选7x64, 8x64可能会报错”failed to install python”)<br>  <img src="/images/选择配置.png" alt="选择配置"></p></li><li><p>点击deploy now， 创建成功后，可以看到当前创建的服务器状态为 Installing，等待几分钟后，就可以就变成 Running 了。<br>  <img src="/images/创建server成功.png" alt="创建server成功"></p></li><li><p>点进去，查看该服务器 IP，Username，Password。</p></li></ol><h1 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h1><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>mac 系统的话，可以直接用终端连接服务器：ssh <a href="mailto:root@149.28.90.255" target="_blank" rel="noopener">root@149.28.90.255</a>，再输入密码即可。<br>     <img src="/images/mac连接服务器.png" alt="mac连接服务器"></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>windows 系统的话，可以直接用 SecureCRT 连接服务器或者使用Putty一个免费SSH客户端<br>     <img src="/images/windows连接服务器.jpeg" alt="windows连接服务器"></p><p>ps：连接成功后，可以输入 passwd 来修改密码</p><h1 id="搭建-Shadowsocks"><a href="#搭建-Shadowsocks" class="headerlink" title="搭建 Shadowsocks"></a>搭建 Shadowsocks</h1><ol><li>运行以下三条命令:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><ol start="2"><li>选择脚本（Python、R、Go、libev），任选一个：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Which Shadowsocks server you<span class="string">'d select:</span></span><br><span class="line"><span class="string">1.Shadowsocks-Python</span></span><br><span class="line"><span class="string">2.ShadowsocksR</span></span><br><span class="line"><span class="string">3.Shadowsocks-Go</span></span><br><span class="line"><span class="string">4.Shadowsocks-libev</span></span><br><span class="line"><span class="string">Please enter a number (default 1):</span></span><br></pre></td></tr></table></figure><p>我选择Shadowsocks-Go，输入3……然后，输入密码和端口（也就是你翻墙时所用的密码和端口）</p><ol start="3"><li>安装成功后，命令行出现：</li></ol><p>Congratulations, Shadowsocks-Go server install completed!<br>Your Server IP        :  45.32.73.59<br>Your Server Port      :  8989<br>Your Password         :  teddysun.com<br>Your Encryption Method:  aes-256-cfb</p><p>Welcome to visit: <a href="https://teddysun.com/486.html" target="_blank" rel="noopener">https://teddysun.com/486.html</a><br>Enjoy it!</p><h1 id="Shadowsocks-客户端"><a href="#Shadowsocks-客户端" class="headerlink" title="Shadowsocks 客户端"></a>Shadowsocks 客户端</h1><p>下载对应系统的客户端并配置服务器</p><ul><li><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">shadowsocks-windows</a><br>   <img src="/images/windows_shadowsocks客户端.png" alt="windows_shadowsocks客户端"></p></li><li><p><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">shadowsocks-mac</a><br>   <img src="/images/mac_shadowsocks客户端.png" alt="mac_shadowsocks客户端"></p></li><li><p><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">shadowsocks-android</a><br>   <img src="/images/android_shadowsocks客户端.jpg" alt="android_shadowsocks客户端"></p></li></ul><h1 id="使用-Chrome-插件-——-Proxy-SwitchyOmega"><a href="#使用-Chrome-插件-——-Proxy-SwitchyOmega" class="headerlink" title="使用 Chrome 插件 —— Proxy SwitchyOmega"></a>使用 Chrome 插件 —— Proxy SwitchyOmega</h1><p>方便在不同代理之间切换，例如直接连接或者自动代理模式。</p><p>去chrome商场安装 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">SwitchyOmega插件</a>。</p><ol><li>设置 proxy模式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代理协议：socks5</span><br><span class="line">代理服务器：127.0.0.1 // 本地ip</span><br><span class="line">代理端口：1080 // Shadowsocks客户端配置的代理端口</span><br></pre></td></tr></table></figure><p><img src="/images/设置proxy模式.png" alt="设置proxy模式"></p><p>点击左边的“应用选项让配置生效”</p><ol start="2"><li>auto switch</li></ol><p>设置需要走代理的网站</p><p><img src="/images/setProxyWeb.png" alt="setProxyWeb"></p><ol start="3"><li>切换模式</li></ol><p><img src="/images/切换模式.png" alt="切换模式"></p><p>若能正确访问<a href="www.google.com">google</a>，即表示证明你搭建Shadowsocks成功了!</p><h1 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h1><p>YouTube 详情显示连接速度<br>视频右键，选择 stats for nerds</p><p><img src="/images/youtube_connection_speed.png" alt="youtube_connection_speed"></p><h1 id="全国-Ping-测试"><a href="#全国-Ping-测试" class="headerlink" title="全国 Ping 测试"></a>全国 Ping 测试</h1><p>本地 cmd 运行 ping ip 查看延迟和丢包。</p><p><img src="/images/全国Ping测试.png" alt="全国Ping测试"></p><h1 id="IP-全球-Ping-测试"><a href="#IP-全球-Ping-测试" class="headerlink" title="IP 全球 Ping 测试"></a>IP 全球 Ping 测试</h1><p><a href="http://ping.pe/" target="_blank" rel="noopener">http://ping.pe/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;连不了外网，上不了谷歌的感觉很不爽，咳咳，程序猿查资料而已。网上很多教程都被和谐了，生怕以后找不到教程，所以来这记录下。&lt;br&gt;仅供参考。&lt;br&gt;科学上网。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vultr" scheme="http://yoursite.com/tags/vultr/"/>
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>mac 使用技巧归纳</title>
    <link href="http://yoursite.com/2019/03/17/mac-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%BD%92%E7%BA%B3/"/>
    <id>http://yoursite.com/2019/03/17/mac-使用技巧归纳/</id>
    <published>2019-03-17T05:23:27.000Z</published>
    <updated>2019-03-20T15:22:38.498Z</updated>
    
    <content type="html"><![CDATA[<p>在家用 mac，总会有时候遇到快捷键与 windows 不同，或者其他的使用技巧，这里做个简单地归纳吧，方便自己的使用与查找。<br>时不时会做个更新。</p><a id="more"></a><h1 id="百度云下载破解"><a href="#百度云下载破解" class="headerlink" title="百度云下载破解"></a>百度云下载破解</h1><p><a href="https://blog.csdn.net/cheneykl/article/details/80941005" target="_blank" rel="noopener">Mac 百度云下载限速破解教程（附软件）</a></p><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p>局部截图：Command + shift + 4</p><p>截当前窗口：Command + shift + 4, 点击空格键</p><p>全屏截图：Command + shift + 3</p><p>touch bar 截图： Command + shift + 6</p><h1 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h1><p>系统自带的 QuickTime Player 就有录屏功能</p><p><img src="/images/quickTime_Player.png" alt="QuickTime Player"></p><h1 id="好玩的读单词"><a href="#好玩的读单词" class="headerlink" title="好玩的读单词"></a>好玩的读单词</h1><p>在终端中输入： say + 单词，就会读出这个单词</p><h1 id="使用Finder搜索大文件"><a href="#使用Finder搜索大文件" class="headerlink" title="使用Finder搜索大文件"></a>使用Finder搜索大文件</h1><p><img src="/images/使用Finder搜索大文件.jpg" alt="使用Finder搜索大文件"></p><h1 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h1><ol><li><p>系统自带的便笺</p></li><li><p>simple antnotes：比系统的好用</p></li></ol><h1 id="调整-LaunchPad-图标数量及大小"><a href="#调整-LaunchPad-图标数量及大小" class="headerlink" title="调整 LaunchPad 图标数量及大小"></a>调整 LaunchPad 图标数量及大小</h1><p>可以根据需要让每页显示更多或更少应用</p><p>打开终端<br>1、调整每列图标数量，把m换成你想要的数字（推荐5~7）<br>defaults write com.apple.dock springboard-rows -int m<br>2、调整每行图标数量，把n换成你想要的数字（推荐6~11）<br>defaults write com.apple.dock springboard-columns -int n<br>3、修改后重置 Launchpad<br>defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock</p><h1 id="用快捷键快速移动光标"><a href="#用快捷键快速移动光标" class="headerlink" title="用快捷键快速移动光标"></a>用快捷键快速移动光标</h1><p>command + 方向键：将光标移至最顶端/末端<br>option + 方向键：以单词为单位移动光标（中文会自动识别词组）</p><h1 id="聚焦功能"><a href="#聚焦功能" class="headerlink" title="聚焦功能"></a>聚焦功能</h1><p>快速查找电脑上的内容，也可以搜索互联网上内容</p><p>打开聚焦：Command + 空格</p><p>搜索互联网：打开聚焦后，输入关键字，再 Command + b， 会打开默认浏览器就行搜索</p><p>搜索汇率：数字 + 单位，如 100rmb</p><h1 id="复制粘贴等快捷键有时会失效"><a href="#复制粘贴等快捷键有时会失效" class="headerlink" title="复制粘贴等快捷键有时会失效"></a>复制粘贴等快捷键有时会失效</h1><p>有时会遇到第一次复制或粘贴时，不起作用，需要多次复制粘贴才起作用。网上推测是 <a href="https://www.zhihu.com/question/35784714" target="_blank" rel="noopener">三指拖动的锅</a>, 我觉得也是。<br>有些网友是因为装了 popclip 导致的。而我检查我的 mac 后，发现是我的有道词典开启了划词释义，关闭后就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在家用 mac，总会有时候遇到快捷键与 windows 不同，或者其他的使用技巧，这里做个简单地归纳吧，方便自己的使用与查找。&lt;br&gt;时不时会做个更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙基本功能实现（开启，扫描，配对，连接等）</title>
    <link href="http://yoursite.com/2019/03/16/%E8%93%9D%E7%89%99%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/03/16/蓝牙基本功能实现/</id>
    <published>2019-03-16T15:42:18.000Z</published>
    <updated>2019-03-20T12:50:02.718Z</updated>
    
    <content type="html"><![CDATA[<p>最近有在学习Android蓝牙模块功能，包括开启，扫描，配对，连接等，在这里记录下相关功能的实现。后续会再做蓝牙电话apk的实现及蓝牙相关源码的分享。</p><a id="more"></a><h1 id="Android-蓝牙基本功能详解"><a href="#Android-蓝牙基本功能详解" class="headerlink" title="Android 蓝牙基本功能详解"></a>Android 蓝牙基本功能详解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 蓝牙所需要的权限</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span><br><span class="line">&lt;uses-feature android:name=<span class="string">"android.hardware.location.gps"</span> /&gt;</span><br><span class="line">&lt;uses-feature</span><br><span class="line">    android:name=<span class="string">"android.hardware.bluetooth_le"</span></span><br><span class="line">    android:required=<span class="string">"true"</span> /&gt;</span><br><span class="line"><span class="comment">// 蓝牙搜索从5.0后需要的权限，在Andoid 6.0后 需要动态申请</span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="设备是否支持蓝牙功能"><a href="#设备是否支持蓝牙功能" class="headerlink" title="设备是否支持蓝牙功能"></a>设备是否支持蓝牙功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bluetoothAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"不支持蓝牙模块"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝牙的打开"><a href="#蓝牙的打开" class="headerlink" title="蓝牙的打开"></a>蓝牙的打开</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">    <span class="comment">// 蓝牙已打开</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">    <span class="comment">// 打开蓝牙的同时想设置让自己手机蓝牙多少秒可见可以使用，默认120s，最多300s</span></span><br><span class="line">    intent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, <span class="number">300</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝牙搜索"><a href="#蓝牙搜索" class="headerlink" title="蓝牙搜索"></a>蓝牙搜索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否有locatioin权限</span></span><br><span class="line"><span class="keyword">if</span> (!checkLocationPermission()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是在搜索的状态，则需要取消搜索</span></span><br><span class="line"><span class="keyword">if</span> (bluetoothadapter.isDiscovering()) &#123;</span><br><span class="line">    bluetoothadapter.cancelDiscovery();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索蓝牙</span></span><br><span class="line">bluetoothAdapter.startDiscovery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蓝牙设备广播接收者</span></span><br><span class="line"><span class="keyword">private</span> BroadcastReceiver deviceReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (BluetoothAdapter.ACTION_DISCOVERY_STARTED.equals(action)) &#123;</span><br><span class="line">            Log.e(TAG,<span class="string">"开始搜索"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) &#123;</span><br><span class="line">            Log.e(TAG,<span class="string">"查找到设备完成"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothDevice.ACTION_FOUND.equals(action)) &#123;</span><br><span class="line">            String name = intent.getStringExtra(BluetoothDevice.EXTRA_NAME);</span><br><span class="line">            <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> rssi = intent.getExtras().getShort(BluetoothDevice.EXTRA_RSSI);</span><br><span class="line">                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</span><br><span class="line">                MyBlueToothDevice myDevice = <span class="keyword">new</span> MyBlueToothDevice(device, name, rssi);</span><br><span class="line">                myBlueToothDevices.add(myDevice);</span><br><span class="line">                Log.e(<span class="string">"====="</span>,<span class="string">"搜索到设备: "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothAdapter.ACTION_SCAN_MODE_CHANGED.equals(action)) &#123;</span><br><span class="line">            <span class="keyword">int</span> scanMode = intent.getIntExtra(BluetoothAdapter.EXTRA_SCAN_MODE,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) &#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"设备可见监听"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"设备不可见监听"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) &#123;</span><br><span class="line">            BluetoothDevice remoteDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</span><br><span class="line">            <span class="keyword">if</span> (remoteDevice == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"没有绑定设备"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> status = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (status == BluetoothDevice.BOND_BONDED) &#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"绑定设备完成: "</span> + remoteDevice.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == BluetoothDevice.BOND_BONDING) &#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"绑定设备中: "</span> + remoteDevice.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == BluetoothDevice.BOND_NONE) &#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"取消绑定: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothDevice.ACTION_ACL_CONNECTED.equals(action)) &#123;</span><br><span class="line">            isBluetoothConnected = <span class="keyword">true</span>;</span><br><span class="line">            changeBluetoothStatus();</span><br><span class="line">            Log.e(TAG,<span class="string">"已经连接上"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothDevice.ACTION_ACL_DISCONNECTED.equals(action)) &#123;</span><br><span class="line">            Log.e(TAG,<span class="string">"断开连接"</span>);</span><br><span class="line">            isBluetoothConnected = <span class="keyword">false</span>;</span><br><span class="line">            changeBluetoothStatus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蓝牙状态广播接收者</span></span><br><span class="line"><span class="keyword">private</span> BroadcastReceiver statusReceiver  = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> status = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">            <span class="keyword">case</span> BluetoothAdapter.STATE_OFF:</span><br><span class="line">                Log.e(TAG, <span class="string">"蓝牙已关闭"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BluetoothAdapter.STATE_ON:</span><br><span class="line">                Log.e(TAG, <span class="string">"蓝牙已打开"</span>);</span><br><span class="line">                startDiscovery();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BluetoothAdapter.STATE_TURNING_OFF:</span><br><span class="line">                Log.e(TAG, <span class="string">"蓝牙关闭中..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BluetoothAdapter.STATE_TURNING_ON:</span><br><span class="line">                Log.e(TAG, <span class="string">"蓝牙打开中..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册广播</span></span><br><span class="line">IntentFilter deviceIntentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">deviceIntentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothDevice.ACTION_FOUND);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);</span><br><span class="line">deviceIntentFilter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);</span><br><span class="line">registerReceiver(deviceReceiver, deviceIntentFilter);</span><br><span class="line"></span><br><span class="line">IntentFilter stateIntentFilter = <span class="keyword">new</span> IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);</span><br><span class="line">registerReceiver(statusReceiver, stateIntentFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消注册广播</span></span><br><span class="line">unregisterReceiver(deviceReceiver);</span><br><span class="line">unregisterReceiver(statusReceiver);</span><br></pre></td></tr></table></figure><h2 id="蓝牙连接"><a href="#蓝牙连接" class="headerlink" title="蓝牙连接"></a>蓝牙连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// device: BluetoothDevice</span></span><br><span class="line"><span class="keyword">boolean</span> bond = device.createBond();</span><br></pre></td></tr></table></figure><h2 id="蓝牙断开连接"><a href="#蓝牙断开连接" class="headerlink" title="蓝牙断开连接"></a>蓝牙断开连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// device: BluetoothDevice</span></span><br><span class="line">Method method = BluetoothDevice.class.getMethod(<span class="string">"removeBond"</span>);</span><br><span class="line">method.invoke(device);</span><br></pre></td></tr></table></figure><h2 id="获取本地蓝牙属性"><a href="#获取本地蓝牙属性" class="headerlink" title="获取本地蓝牙属性"></a>获取本地蓝牙属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地蓝牙名称</span></span><br><span class="line">String name = bluetoothadapter.getName();</span><br><span class="line"><span class="comment">// 本地蓝牙地址</span></span><br><span class="line">String address = bluetoothadapter.getAddress();</span><br></pre></td></tr></table></figure><h2 id="获取已绑定设备列表"><a href="#获取已绑定设备列表" class="headerlink" title="获取已绑定设备列表"></a>获取已绑定设备列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bluetoothAdapter.getBondedDevices()</span><br></pre></td></tr></table></figure><h2 id="判断是否已连接蓝牙设备"><a href="#判断是否已连接蓝牙设备" class="headerlink" title="判断是否已连接蓝牙设备"></a>判断是否已连接蓝牙设备</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method getConnectionState = adapter.getClass().getMethod(<span class="string">"getConnectionState"</span>);</span><br><span class="line">        <span class="keyword">int</span> state = (<span class="keyword">int</span>) getConnectionState.invoke(adapter);</span><br><span class="line">        Log.e(TAG, <span class="string">"isConnected: "</span> + (state == STATE_CONNECTED));</span><br><span class="line">        <span class="keyword">return</span> state == STATE_CONNECTED;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取已连接蓝牙设备"><a href="#获取已连接蓝牙设备" class="headerlink" title="获取已连接蓝牙设备"></a>获取已连接蓝牙设备</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BluetoothDevice <span class="title">getConnectedDevice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isConnected()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">    Set&lt;BluetoothDevice&gt; bondedDevices = adapter.getBondedDevices();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method isConnectedMethod = BluetoothDevice.class.getMethod(<span class="string">"isConnected"</span>);</span><br><span class="line">        <span class="keyword">for</span> (BluetoothDevice device : bondedDevices) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isConnected = (<span class="keyword">boolean</span>) isConnectedMethod.invoke(device);</span><br><span class="line">            <span class="keyword">if</span> (isConnected) &#123;</span><br><span class="line">                <span class="keyword">return</span> device;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有在学习Android蓝牙模块功能，包括开启，扫描，配对，连接等，在这里记录下相关功能的实现。后续会再做蓝牙电话apk的实现及蓝牙相关源码的分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Bluetooth" scheme="http://yoursite.com/tags/Bluetooth/"/>
    
      <category term="蓝牙" scheme="http://yoursite.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>反射机制原理及使用</title>
    <link href="http://yoursite.com/2019/03/15/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/15/反射机制原理及使用/</id>
    <published>2019-03-15T15:26:00.000Z</published>
    <updated>2019-03-17T04:15:37.586Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究蓝牙源码时发现，有部分类是被 @hide 掉的，例如 通过蓝牙获取通讯录及通话记录，是通过蓝牙 Pbap 协议，具体实现是在 BluetoothPbapClient 中实现，而该类是 hide 的，注释为当前未完成，后期变动可能会比较大，所以hide掉不会放在 sdk 里使用。<br>这种情况下，一般是通过修改源码重新编译来实现该需求，不过我为了快速完成需求，考虑使用反射来调用 BluetoothPbapClient 中的接口。<br>在此记录下反射的使用及原理。</p><p>反射，是能够在程序运行时修改程序的行为。</p><a id="more"></a><h1 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="获取-Class"><a href="#获取-Class" class="headerlink" title="获取 Class"></a>获取 Class</h3><p>Class 就是一个对象，它用来代表运行在 Java 虚拟机中的类和接口。</p><p>获取三种的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student.getClass();</span><br><span class="line"></span><br><span class="line">Student.class;</span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">"com.xx.Student"</span>);</span><br></pre></td></tr></table></figure><h3 id="获取-Class-修饰符"><a href="#获取-Class-修饰符" class="headerlink" title="获取 Class 修饰符"></a>获取 Class 修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TestModifier.class.getModifiers()  <span class="comment">// 1025</span></span><br><span class="line">Modifier.toString(TestModifier.class.getModifiers()))  <span class="comment">// public abstract</span></span><br></pre></td></tr></table></figure><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><h3 id="获取-Filed"><a href="#获取-Filed" class="headerlink" title="获取 Filed"></a>获取 Filed</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前类所有的成员变量，包括私有或者非私有的，不包括从祖先类继承的非私有成员变量</span></span><br><span class="line">getDeclaredFields();</span><br><span class="line">getDeclaredField(String name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有当前类及从祖先类继承的非私有成员变量</span></span><br><span class="line">getFields();</span><br><span class="line">getField(String name);</span><br></pre></td></tr></table></figure><h3 id="获取-Field-的类型"><a href="#获取-Field-的类型" class="headerlink" title="获取 Field 的类型"></a>获取 Field 的类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法可以获取到泛型类型</span></span><br><span class="line">getGenericType()</span><br><span class="line"></span><br><span class="line">getType()</span><br></pre></td></tr></table></figure><h3 id="获取Field-修饰符"><a href="#获取Field-修饰符" class="headerlink" title="获取Field 修饰符"></a>获取Field 修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同 Class 获取修饰符</span></span><br><span class="line">getModifiers()</span><br></pre></td></tr></table></figure><h3 id="Field-内容的读取与赋值"><a href="#Field-内容的读取与赋值" class="headerlink" title="Field 内容的读取与赋值"></a>Field 内容的读取与赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getShort</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getChar</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getByte</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// set</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInt</span><span class="params">(Object obj,<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLong</span><span class="params">(Object obj,<span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFloat</span><span class="params">(Object obj,<span class="keyword">float</span> value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getShort</span><span class="params">(Object obj,<span class="keyword">short</span> value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDouble</span><span class="params">(Object obj,<span class="keyword">double</span> value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChar</span><span class="params">(Object obj,<span class="keyword">char</span> value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByte</span><span class="params">(Object obj,<span class="keyword">byte</span> b)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBoolean</span><span class="params">(Object obj,<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span></span><br></pre></td></tr></table></figure><p>注：在反射中访问了private修饰的成员，需要添加访问权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fieldb.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="获取-Method"><a href="#获取-Method" class="headerlink" title="获取 Method"></a>获取 Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredMethods()</span><br><span class="line">getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</span><br><span class="line"></span><br><span class="line">getMethods()</span><br><span class="line">getMethod(String name, Class&lt;?&gt;... parameterTypes)</span><br></pre></td></tr></table></figure><h3 id="获取方法参数"><a href="#获取方法参数" class="headerlink" title="获取方法参数"></a>获取方法参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Parameter[] getParameters() &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes() &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Type[] getGenericParameterTypes() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Parameter.java:</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getType() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="获取返回值类型"><a href="#获取返回值类型" class="headerlink" title="获取返回值类型"></a>获取返回值类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getReturnType() &#123;&#125;</span><br><span class="line"><span class="comment">// 获取返回值类型包括泛型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">getGenericReturnType</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="获取修饰符"><a href="#获取修饰符" class="headerlink" title="获取修饰符"></a>获取修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同 Class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="获取异常类型"><a href="#获取异常类型" class="headerlink" title="获取异常类型"></a>获取异常类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getExceptionTypes() &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Type[] getGenericExceptionTypes() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="方法执行"><a href="#方法执行" class="headerlink" title="方法执行"></a>方法执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><h3 id="获取-Constructor"><a href="#获取-Constructor" class="headerlink" title="获取 Constructor"></a>获取 Constructor</h3><p>注：Constructor 不能从父类继承，所以就没有办法通过 getConstructor() 获取到父类的 Constructor。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredConstructors()</span><br><span class="line">getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</span><br><span class="line"></span><br><span class="line">getConstructors()</span><br><span class="line">getConstructor(Class&lt;?&gt;... parameterTypes)</span><br></pre></td></tr></table></figure><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><p>在 Java 反射机制中有两种方法可以用来创建类的对象实例：Class.newInstance() 和 Constructor.newInstance()。官方文档建议开发者使用后面这种方法，下面是原因。</p><p>Class.newInstance() 只能调用无参的构造方法，而 Constructor.newInstance() 则可以调用任意的构造方法。<br>Class.newInstance() 通过构造方法直接抛出异常，而 Constructor.newInstance() 会把抛出来的异常包装到 InvocationTargetException 里面去，这个和 Method 行为一致。<br>Class.newInstance() 要求构造方法能够被访问，而 Constructor.newInstance() 却能够访问 private 修饰的构造器。</p><h1 id="反射的原理"><a href="#反射的原理" class="headerlink" title="反射的原理"></a>反射的原理</h1><p>java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI（Run-Time Type Identification），它假定我们在编译时已经知道了所有的类型信息，另一种是反射机制。</p><p>它允许我们在运行时发现和使用类的信息，也就是这里要说的，通过 Class 类与 reflect 类库一起对反射进行支持，该类库包括 Field、Method 和 Constructor 类。这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样可以使用 Contructor 创建新的对象，用 get() 和 set() 方法获取、修改类中成员等，用 invoke() 调用 Method 对象关联的方法等等。</p><p>这样对象信息可以在运行时完全确定下来，而在编译时不需要知道任何关于类的信息。</p><p>反射机制并没有很神奇之处，当通过反射对一个未知类型的对象做处理时，JVM只是简单的检查这个对象属于哪个特定的类，因此那个类的 .class 对于JVM是肯定可以获取的。</p><p>综上，对于 RTTI 和 反射的区别只在于：</p><ul><li>RTTI 是编译器在编译时打开和检查 .class 文件</li><li>反射 是在运行时打开和检查 .class 文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究蓝牙源码时发现，有部分类是被 @hide 掉的，例如 通过蓝牙获取通讯录及通话记录，是通过蓝牙 Pbap 协议，具体实现是在 BluetoothPbapClient 中实现，而该类是 hide 的，注释为当前未完成，后期变动可能会比较大，所以hide掉不会放在 sdk 里使用。&lt;br&gt;这种情况下，一般是通过修改源码重新编译来实现该需求，不过我为了快速完成需求，考虑使用反射来调用 BluetoothPbapClient 中的接口。&lt;br&gt;在此记录下反射的使用及原理。&lt;/p&gt;
&lt;p&gt;反射，是能够在程序运行时修改程序的行为。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Reflection" scheme="http://yoursite.com/tags/Reflection/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CarRadioService 分析</title>
    <link href="http://yoursite.com/2019/03/04/aosp-CarRadioService-%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/03/04/aosp-CarRadioService-分析/</id>
    <published>2019-03-04T13:14:42.000Z</published>
    <updated>2019-03-04T13:37:19.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CarRadioService-分析"><a href="#CarRadioService-分析" class="headerlink" title="CarRadioService 分析"></a>CarRadioService 分析</h1><p>需求需要自己做个车机版 Radio app，需要 framework 提供接口，并且需要定义在 CarService 中，所以这里对 CarService 的流程做了个简单地总结，以及如何在 framework 层定义接口，最后是在模拟器中如何调试接口。</p><a id="more"></a><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>步骤 0-27：</p><p>CarService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mVehicle = getVehicle(<span class="keyword">null</span> <span class="comment">/* Any Vehicle HAL interface name */</span>);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    mICarImpl = <span class="keyword">new</span> ICarImpl(<span class="keyword">this</span>, mVehicle, SystemInterface.getDefault(<span class="keyword">this</span>),</span><br><span class="line">            mCanBusErrorNotifier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    mICarImpl.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ICarImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ICarImpl</span><span class="params">(Context serviceContext, IVehicle vehicle, SystemInterface systemInterface,</span></span></span><br><span class="line"><span class="function"><span class="params">        CanBusErrorNotifier errorNotifier)</span> </span>&#123;</span><br><span class="line">    mHal = <span class="keyword">new</span> VehicleHal(vehicle);</span><br><span class="line">    mCarRadioService = <span class="keyword">new</span> CarRadioService(serviceContext, mHal.getRadioHal());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Be careful with order. Service depending on other service should be inited later.</span></span><br><span class="line">    List&lt;CarServiceBase&gt; allServices = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(</span><br><span class="line">            mCarRadioService</span><br><span class="line">    ));</span><br><span class="line">    mAllServices = allServices.toArray(<span class="keyword">new</span> CarServiceBase[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 7</span></span><br><span class="line">    mHal.init();</span><br><span class="line">    <span class="comment">// 11</span></span><br><span class="line">    <span class="keyword">for</span> (CarServiceBase service : mAllServices) &#123;</span><br><span class="line">        service.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VehicleHal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VehicleHal</span><span class="params">(IVehicle vehicle)</span> </span>&#123;</span><br><span class="line">    mRadioHal = <span class="keyword">new</span> RadioHalService(<span class="keyword">this</span>);</span><br><span class="line">    mAllServices.addAll(Arrays.asList(mRadioHal));</span><br><span class="line">    mHalClient = <span class="keyword">new</span> HalClient(vehicle, mHandlerThread.getLooper(), <span class="keyword">this</span> <span class="comment">/*IVehicleCallback*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;VehiclePropConfig&gt; properties;</span><br><span class="line">    properties = <span class="keyword">new</span> HashSet&lt;&gt;(mHalClient.getAllPropConfigs());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (HalServiceBase service: mAllServices) &#123;</span><br><span class="line">        Collection&lt;VehiclePropConfig&gt; taken = service.takeSupportedProperties(properties);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (VehiclePropConfig p: taken) &#123;</span><br><span class="line">                mPropertyHandlers.append(p.prop, service);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        properties.removeAll(taken);</span><br><span class="line">        <span class="comment">// 9</span></span><br><span class="line">        service.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12 下面走回调流程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public class VehicleHal extends IVehicleCallback.Stub</span></span><br><span class="line"><span class="comment">// 这个类接受hal层的callback，如果属性值更新了，就会向framework通知，然后在这个地方接收。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPropertyEvent</span><span class="params">(ArrayList&lt;VehiclePropValue&gt; propValues)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (VehiclePropValue v : propValues) &#123;</span><br><span class="line">        HalServiceBase service = mPropertyHandlers.get(v.prop);</span><br><span class="line">        mServicesToDispatch.add(service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (HalServiceBase s : mServicesToDispatch) &#123;</span><br><span class="line">        <span class="comment">// 13</span></span><br><span class="line">        s.handleHalEvents(s.getDispatchList());</span><br><span class="line">        s.getDispatchList().clear();</span><br><span class="line">    &#125;</span><br><span class="line">    mServicesToDispatch.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HalClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line">HalClient(IVehicle vehicle, Looper looper, IVehicleCallback callback) &#123;</span><br><span class="line">    mVehicle = vehicle;</span><br><span class="line">    Handler handler = <span class="keyword">new</span> CallbackHandler(looper, callback);</span><br><span class="line">    mInternalCallback = <span class="keyword">new</span> VehicleCallback(handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RadioHalService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 14</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleHalEvents</span><span class="params">(List&lt;VehiclePropValue&gt; values)</span> </span>&#123;</span><br><span class="line">    RadioHalService.RadioListener radioListener;</span><br><span class="line">    radioListener = mListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (VehiclePropValue v : values) &#123;</span><br><span class="line">        <span class="comment">// 15</span></span><br><span class="line">        CarRadioEvent radioEvent = createCarRadioEvent(v);</span><br><span class="line">        <span class="comment">// 16</span></span><br><span class="line">        radioListener.onEvent(radioEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CarRadioEvent <span class="title">createCarRadioEvent</span><span class="params">(VehiclePropValue v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.prop) &#123;</span><br><span class="line">        <span class="keyword">case</span> VehicleProperty.RADIO_PRESET:</span><br><span class="line">            <span class="keyword">int</span> vecSize = v.value.int32Values.size();</span><br><span class="line"></span><br><span class="line">            Integer intValues[] = <span class="keyword">new</span> Integer[<span class="number">4</span>];</span><br><span class="line">            v.value.int32Values.toArray(intValues);</span><br><span class="line"></span><br><span class="line">            CarRadioPreset preset =</span><br><span class="line">                <span class="keyword">new</span> CarRadioPreset(intValues[<span class="number">0</span>], intValues[<span class="number">1</span>], intValues[<span class="number">2</span>], intValues[<span class="number">3</span>]);</span><br><span class="line">            CarRadioEvent event = <span class="keyword">new</span> CarRadioEvent(CarRadioEvent.RADIO_PRESET, preset);</span><br><span class="line">            <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 17</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(RadioListener listener)</span> </span>&#123;</span><br><span class="line">    mListener = listener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subscribe to all radio properties.</span></span><br><span class="line">    mHal.subscribeProperty(<span class="keyword">this</span>, VehicleProperty.RADIO_PRESET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CarRadioService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 12</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CarRadioManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 27</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(CarRadioEventListener listener)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> CarNotConnectedException </span>&#123;</span><br><span class="line">        mListener = listener;</span><br><span class="line">        <span class="comment">// 19</span></span><br><span class="line">        mListenerToService = <span class="keyword">new</span> CarRadioEventListenerToService(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 18</span></span><br><span class="line">        mService.registerListener(mListenerToService);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CarRadioEventListenerToService</span> <span class="keyword">extends</span> <span class="title">ICarRadioEventListener</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(CarRadioEvent event)</span> </span>&#123;</span><br><span class="line">        CarRadioManager manager = mManager.get();</span><br><span class="line">        <span class="comment">// 21</span></span><br><span class="line">        manager.handleEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(CarRadioEvent event)</span> </span>&#123;</span><br><span class="line">    mHandler.sendMessage(mHandler.obtainMessage(MSG_RADIO_EVENT, event));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 23</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EventCallbackHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_RADIO_EVENT:</span><br><span class="line">                CarRadioManager mgr = mMgr.get();</span><br><span class="line">                mgr.dispatchEventToClient((CarRadioEvent) msg.obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 24</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchEventToClient</span><span class="params">(CarRadioEvent event)</span> </span>&#123;</span><br><span class="line">    CarRadioEventListener listener;</span><br><span class="line">    <span class="comment">// 25</span></span><br><span class="line">    listener = mListener;</span><br><span class="line">    listener.onEvent(event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CarRadioEventListener.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 26</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarRadioEventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(<span class="keyword">final</span> CarRadioEvent event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="App-调用接口"><a href="#App-调用接口" class="headerlink" title="App 调用接口"></a>App 调用接口</h2><h3 id="初始化-Car-及-CarRadioManager"><a href="#初始化-Car-及-CarRadioManager" class="headerlink" title="初始化 Car 及 CarRadioManager"></a>初始化 Car 及 CarRadioManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Car car;</span><br><span class="line"><span class="keyword">public</span> CarRadioManager carRadioManager;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    car = Car.createCar(<span class="keyword">this</span>, <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                carRadioManager = (CarRadioManager) car.getCarManager(Car.RADIO_SERVICE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CarNotConnectedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            carRadioManager = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    car.connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口定义-framework层定义"><a href="#接口定义-framework层定义" class="headerlink" title="接口定义 (framework层定义)"></a>接口定义 (framework层定义)</h3><p>CarRadioManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setPreset</span><span class="params">(CarRadioPreset preset)</span> <span class="keyword">throws</span> IllegalArgumentException,</span></span><br><span class="line"><span class="function">        CarNotConnectedException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mService.setPreset(preset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RadioHalService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRadioPreset</span><span class="params">(CarRadioPreset preset)</span> </span>&#123;</span><br><span class="line">    mHal.set(VehicleProperty.RADIO_PRESET).to(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</span><br><span class="line">            preset.getPresetNumber(),</span><br><span class="line">            preset.getBand(),</span><br><span class="line">            preset.getChannel(),</span><br><span class="line">            preset.getSubChannel()&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">VehicleHal.java</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function">VehiclePropValueSetter <span class="title">set</span><span class="params">(<span class="keyword">int</span> propId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VehiclePropValueSetter(mHalClient, propId, NO_AREA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to</span><span class="params">(<span class="keyword">int</span>[] values)</span> <span class="keyword">throws</span> PropertyTimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">        mPropValue.value.int32Values.add(value);</span><br><span class="line">    &#125;</span><br><span class="line">    submit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> <span class="keyword">throws</span> PropertyTimeoutException </span>&#123;</span><br><span class="line">    HalClient client =  mClient.get();</span><br><span class="line">    client.setValue(mPropValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HalClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(VehiclePropValue propValue)</span> <span class="keyword">throws</span> PropertyTimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> status = invokeRetriable(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mVehicle.set(propValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(CarLog.TAG_HAL, <span class="string">"Failed to set value"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> StatusCode.TRY_AGAIN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, WAIT_CAP_FOR_RETRIABLE_RESULT_MS, SLEEP_BETWEEN_RETRIABLE_INVOKES_MS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StatusCode.INVALID_ARG == status) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                String.format(<span class="string">"Failed to set value for: 0x%x, areaId: 0x%x"</span>,</span><br><span class="line">                        propValue.prop, propValue.areaId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StatusCode.TRY_AGAIN == status) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PropertyTimeoutException(propValue.prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StatusCode.OK != status) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                String.format(<span class="string">"Failed to set property: 0x%x, areaId: 0x%x, "</span></span><br><span class="line">                        + <span class="string">"code: %d"</span>, propValue.prop, propValue.areaId, status));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hardware:<br><!-- android.hardware.automotive.vehicle.V2_0.IVehicle --></p><h2 id="模拟器如何做调试"><a href="#模拟器如何做调试" class="headerlink" title="模拟器如何做调试"></a>模拟器如何做调试</h2><ol><li><p>编译 Car 版本的 harware 源码，及 CarService Apk<br>注：Genymotion pixel xl 对应的是 marlin 版本， 编译出来是64位不能用，所以需要编译 x86 版本，为32位的</p></li><li><p>将编译生成的三个库文件导入模拟器相应位置。</p></li></ol><p>Z:\SourceCode\android-8.0.0_r1\out\target\product\generic_x86\system\vendor\etc\init<br><a href="mailto:android.hardware.automotive.vehicle@2.0-service.rc" target="_blank" rel="noopener">android.hardware.automotive.vehicle@2.0-service.rc</a></p><p>Z:\SourceCode\android-8.0.0_r1\out\target\product\generic_x86\system\vendor\bin\hw<br><a href="mailto:android.hardware.automotive.vehicle@2.0-service" target="_blank" rel="noopener">android.hardware.automotive.vehicle@2.0-service</a></p><p>Z:\SourceCode\android-8.0.0_r1\out\target\product\generic_x86\system\lib<br><a href="mailto:android.hardware.automotive.vehicle@2.0.so" target="_blank" rel="noopener">android.hardware.automotive.vehicle@2.0.so</a></p><ol start="3"><li>安装 CarService apk</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CarRadioService-分析&quot;&gt;&lt;a href=&quot;#CarRadioService-分析&quot; class=&quot;headerlink&quot; title=&quot;CarRadioService 分析&quot;&gt;&lt;/a&gt;CarRadioService 分析&lt;/h1&gt;&lt;p&gt;需求需要自己做个车机版 Radio app，需要 framework 提供接口，并且需要定义在 CarService 中，所以这里对 CarService 的流程做了个简单地总结，以及如何在 framework 层定义接口，最后是在模拟器中如何调试接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android源码" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Radio" scheme="http://yoursite.com/tags/Radio/"/>
    
      <category term="CarService" scheme="http://yoursite.com/tags/CarService/"/>
    
  </entry>
  
  <entry>
    <title>Fragment 详解</title>
    <link href="http://yoursite.com/2019/02/26/Fragment-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/02/26/Fragment-详解/</id>
    <published>2019-02-26T12:35:42.000Z</published>
    <updated>2019-02-28T15:08:18.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fragment-详解"><a href="#Fragment-详解" class="headerlink" title="Fragment 详解"></a>Fragment 详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fragment(碎片)功能，它非常类似于Activity，可以像Activity一样包含布局，Fragment通常是嵌套在Activity中使用的。<br>Activity一方面需要在布局中为Fragment安排位置，另一方面需要管理好Fragment的生命周期。Activity中有个FragmentManager，其内部维护fragment队列，以及fragment事务的回退栈。</p><a id="more"></a><p><img src="/images/fragment_activity.jpg" alt="fragment_activity嵌套"></p><h2 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h2><p>Fragment必须是依存与Activity而存在的，因此Activity的生命周期会直接影响到Fragment的生命周期。</p><p><img src="/images/fragment_lifecycle.jpg" alt="fragment生命周期"></p><h2 id="Fragment的静态使用"><a href="#Fragment的静态使用" class="headerlink" title="Fragment的静态使用"></a>Fragment的静态使用</h2><p>把Fragment当成普通的控件，直接写在Activity的布局文件中。</p><ol><li>继承Fragment，重写onCreateView决定Fragemnt的布局</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">        Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_title, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在Activity 布局文件中中声明此Fragment，就当和普通的View一样</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/id_fragment_title"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.test.TitleFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Fragment的动态使用"><a href="#Fragment的动态使用" class="headerlink" title="Fragment的动态使用"></a>Fragment的动态使用</h2><ol><li>继承Fragment，重写onCreateView决定Fragemnt的布局</li></ol><p>同静态使用步骤1.</p><ol start="2"><li>在Actvity的布局文件，中间使用一个FrameLayout</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/id_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">"@id/id_ly_bottombar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/id_fragment_title"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在 Activity 的类文件中，动态的添加、更新、以及删除Fragment</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDefaultFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">    FragmentTransaction transaction = fm.beginTransaction();</span><br><span class="line">    titleFragment = <span class="keyword">new</span> TitleFragment();</span><br><span class="line">    transaction.replace(R.id.id_content, titleFragment);</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment-常用-API"><a href="#Fragment-常用-API" class="headerlink" title="Fragment 常用 API"></a>Fragment 常用 API</h2><h3 id="Fragment-常用的三个类"><a href="#Fragment-常用的三个类" class="headerlink" title="Fragment 常用的三个类"></a>Fragment 常用的三个类</h3><p>Fragment 主要用于定义Fragment<br>FragmentManager 主要用于在Activity中操作Fragment<br>FragmentTransaction 保证一些列Fragment操作的原子性</p><h3 id="获取FragmentManager的方式"><a href="#获取FragmentManager的方式" class="headerlink" title="获取FragmentManager的方式"></a>获取FragmentManager的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSupportFragmentManager()</span><br></pre></td></tr></table></figure><h3 id="主要的操作都是FragmentTransaction的方法"><a href="#主要的操作都是FragmentTransaction的方法" class="headerlink" title="主要的操作都是FragmentTransaction的方法"></a>主要的操作都是FragmentTransaction的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FragmentTransaction transaction = fm.benginTransatcion();<span class="comment">//开启一个事务</span></span><br><span class="line">transaction.add()</span><br><span class="line">transaction.remove()</span><br><span class="line">transaction.replace()</span><br><span class="line">transaction.hide()</span><br><span class="line">transaction.show()</span><br><span class="line">detach()</span><br><span class="line">attach()</span><br></pre></td></tr></table></figure><ol><li><p>我在FragmentA中的EditText填了一些数据，当切换到FragmentB时，如果希望会到A还能看到数据，则适合你的就是hide和show；也就是说，希望保留用户操作的面板，你可以使用hide和show，当然了不要使劲在那new实例，进行下非null判断。</p></li><li><p>再比如：我不希望保留用户操作，你可以使用remove()，然后add()；或者使用replace()这个和remove,add是相同的效果。</p></li><li><p>remove和detach有一点细微的区别，在不考虑回退栈的情况下，remove会销毁整个Fragment实例，而detach则只是销毁其视图结构，实例并不会被销毁。那么二者怎么取舍使用呢？如果你的当前Activity一直存在，那么在不希望保留用户操作的时候，你可以优先使用detach。</p></li></ol><h2 id="管理Fragment回退栈"><a href="#管理Fragment回退栈" class="headerlink" title="管理Fragment回退栈"></a>管理Fragment回退栈</h2><p>可以通过Activity维护一个回退栈来保存每次Fragment事务发生的变化。如果你将Fragment任务添加到回退栈，当用户点击后退按钮时，将看到上一次的保存的Fragment。一旦Fragment完全从后退栈中弹出，用户再次点击后退键，则退出当前Activity。</p><p>添加一个Fragment事务到回退栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FragmentTransaction.addToBackStack(String)</span><br></pre></td></tr></table></figure><ol><li>Activity 添加默认的Fragment</li></ol><p>这里不调用 addToBackStack，是考虑到点击back时，不想显示白班</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction tx = fm.beginTransaction();</span><br><span class="line">tx.add(R.id.id_content, <span class="keyword">new</span> FragmentOne(),<span class="string">"ONE"</span>);</span><br><span class="line">tx.commit();</span><br></pre></td></tr></table></figure><ol start="2"><li>FragmentOne 中添加点击跳转到 FragmentTwo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentOne</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Button mBtn;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">View view = inflater.inflate(R.layout.fragment_one, container, <span class="keyword">false</span>);</span><br><span class="line">mBtn = (Button) view.findViewById(R.id.id_fragment_one_btn);</span><br><span class="line">mBtn.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">FragmentTwo fTwo = <span class="keyword">new</span> FragmentTwo();</span><br><span class="line">FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction tx = fm.beginTransaction();</span><br><span class="line">tx.replace(R.id.id_content, fTwo, <span class="string">"TWO"</span>);</span><br><span class="line">tx.addToBackStack(<span class="keyword">null</span>); </span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>replace是remove和add的合体，并且如果不添加事务到回退栈，前一个Fragment实例会被销毁。这里很明显，我们调用tx.addToBackStack(null);将当前的事务添加到了回退栈，所以FragmentOne实例不会被销毁，但是视图层次依然会被销毁，即会调用onDestoryView和onCreateView</p><h2 id="Fragment与Activity通信"><a href="#Fragment与Activity通信" class="headerlink" title="Fragment与Activity通信"></a>Fragment与Activity通信</h2><ol><li><p>如果你Activity中包含自己管理的Fragment的引用，可以通过引用直接访问所有的Fragment的public方法</p></li><li><p>如果Activity中未保存任何Fragment的引用，那么没关系，每个Fragment都有一个唯一的TAG或者ID,可以通过getSupportFragmentManager.findFragmentByTag()或者findFragmentById()获得任何Fragment实例，然后进行操作。</p></li><li><p>在Fragment中可以通过getActivity得到当前绑定的Activity的实例，然后进行操作。</p></li></ol><h2 id="Fragment与Activity通信的最佳实践"><a href="#Fragment与Activity通信的最佳实践" class="headerlink" title="Fragment与Activity通信的最佳实践"></a>Fragment与Activity通信的最佳实践</h2><p>要考虑Fragment的重复使用，所以必须降低Fragment与Activity的耦合，而且Fragment更不应该直接操作别的Fragment，毕竟Fragment操作应该由它的管理者Activity来决定。</p><ol><li><p>FragmentOne不和任何Activity耦合，任何Activity都可以使用；并且我们声明了一个接口，来回调其点击事件，想要管理其点击事件的Activity实现此接口就即可。可以看到我们在onClick中首先判断了当前绑定的Activity是否实现了该接口，如果实现了则调用。</p></li><li><p>FragmentOne 中定义接口，来回调点击事件</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> FTwoBtnClickListener fTwoBtnClickListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FTwoBtnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFTwoBtnClick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFTwoBtnClickListener</span><span class="params">(FTwoBtnClickListener fTwoBtnClickListener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fTwoBtnClickListener = fTwoBtnClickListener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mBtn.setOnClickListener(v -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(fTwoBtnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fTwoBtnClickListener.onFTwoBtnClick();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>Activity 中 设置接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fragmentOne.setFTwoBtnClickListener(<span class="keyword">new</span> FTwoBtnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFOneBtnClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFTwo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mFTwo = <span class="keyword">new</span> FragmentTwo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">        FragmentTransaction tx = fm.beginTransaction();</span><br><span class="line">        tx.replace(R.id.id_content, mFTwo, <span class="string">"TWO"</span>);</span><br><span class="line">        tx.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="处理运行时配置发生变化"><a href="#处理运行时配置发生变化" class="headerlink" title="处理运行时配置发生变化"></a>处理运行时配置发生变化</h2><p>运行时配置发生变化，最常见的就是屏幕发生旋转（或者app放后台过长时间），如果你不知道如何处理屏幕变化可以参考：</p><p><a href="https://blog.csdn.net/lmj623565791/article/details/37936275" target="_blank" rel="noopener">Android 屏幕旋转 处理 AsyncTask 和 ProgressDialog 的最佳方案</a></p><ol><li>原本的Activity:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    mFOne = <span class="keyword">new</span> FragmentOne();</span><br><span class="line">    FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">    FragmentTransaction tx = fm.beginTransaction();</span><br><span class="line">    tx.add(R.id.id_content, mFOne, <span class="string">"ONE"</span>);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次屏幕旋转时，都会重新创建 FragmentOne, 并叠加显示，显然有问题。</p><ol start="2"><li>修改后的Activity</li></ol><p>2.1 可以这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Log.e(TAG, savedInstanceState+<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span>(savedInstanceState == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mFOne = <span class="keyword">new</span> FragmentOne();</span><br><span class="line">        FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">        FragmentTransaction tx = fm.beginTransaction();</span><br><span class="line">        tx.add(R.id.id_content, mFOne, <span class="string">"ONE"</span>);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实通过检查onCreate的参数Bundle savedInstanceState就可以判断，当前是否发生Activity的重新创建, 默认的savedInstanceState会存储一些数据，包括Fragment的实例。<br>所以，只有在savedInstanceState==null时，才进行创建Fragment实例。</p><p>2.2 或者可以这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">    mContentFragment = (ContentFragment) fm.findFragmentById(R.id.id_fragment_container);</span><br><span class="line">    <span class="keyword">if</span>(mContentFragment == <span class="keyword">null</span> ) &#123;</span><br><span class="line">        mContentFragment = <span class="keyword">new</span> ContentFragment();</span><br><span class="line">        fm.beginTransaction().add(R.id.id_fragment_container,mContentFragment).commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Activity因为配置发生改变（屏幕旋转）或者内存不足被系统杀死，造成重新创建时，我们的fragment会被保存下来，但是会创建新的FragmentManager，新的FragmentManager会首先会去获取保存下来的fragment队列，重建fragment队列，从而恢复之前的状态。</p><ol start="3"><li>重新绘制时，Fragment也发生重建</li></ol><p>和Activity类似，Fragment也有onSaveInstanceState的方法，在此方法中进行保存数据，然后在onCreate或者onCreateView或者onActivityCreated进行恢复都可以。</p><h2 id="没有布局的Fragment的作用"><a href="#没有布局的Fragment的作用" class="headerlink" title="没有布局的Fragment的作用"></a>没有布局的Fragment的作用</h2><p>没有布局文件Fragment实际上是为了保存，当Activity重启时，保存大量数据准备的。</p><ol><li><p>继承Fragment，声明需保存状态的对象</p></li><li><p>在 Fragment 创建时，调用 setRetainInstance(true);</p></li><li><p>在 Activity 中创建 Fragment 实例</p></li><li><p>当Activity重新启动后，使用FragmentManager对Fragment进行恢复, 并取出数据</p></li></ol><p>Fragment.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetainedFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">private</span> Bitmap data;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        setRetainInstance(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Bitmap data)</span> </span>&#123; <span class="keyword">this</span>.data = data; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getData</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Activity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">private</span> RetainedFragment dataFragment;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">    dataFragment = (RetainedFragment) fm.findFragmentByTag(<span class="string">"data"</span>);</span><br><span class="line">    <span class="keyword">if</span> (dataFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">        dataFragment = <span class="keyword">new</span> RetainedFragment();</span><br><span class="line">        fm.beginTransaction().add(dataFragment, <span class="string">"data"</span>).commit();</span><br><span class="line">    &#125;</span><br><span class="line">    data = dataFragment.getData();</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123; initData(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    dataFragment.setData(mBitmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Fragment创建对话框"><a href="#使用Fragment创建对话框" class="headerlink" title="使用Fragment创建对话框"></a>使用Fragment创建对话框</h2><p><a href="https://github.com/Mcl-123/DialogFragmentDemo" target="_blank" rel="noopener">DialogFragmentDemo</a></p><h2 id="Fragment-Arguments"><a href="#Fragment-Arguments" class="headerlink" title="Fragment Arguments"></a>Fragment Arguments</h2><p>我们某个按钮触发Activity跳转，需要通过Intent传递参数到目标Activity的Fragment中，那么此Fragment如何获取当前的Intent的值？</p><p>Fragment 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    mArgument = getActivity().getIntent().getStringExtra(ARGUMENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在一个大问题：我们用Fragment的一个很大的原因，就是为了复用。你这么写，相当于这个Fragment已经完全和当前这个宿主Activity绑定了，复用直接废了，所以改用下面的方法：</p><p>Fragment 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Bundle bundle = getArguments();</span><br><span class="line">    <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123; mArgument = bundle.getString(ARGUMENT); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ContentFragment <span class="title">newInstance</span><span class="params">(String argument)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    bundle.putString(ARGUMENT, argument);</span><br><span class="line">    ContentFragment contentFragment = <span class="keyword">new</span> ContentFragment();</span><br><span class="line">    contentFragment.setArguments(bundle);</span><br><span class="line">    <span class="keyword">return</span> contentFragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：setArguments方法必须在fragment创建以后，添加给Activity前完成。千万不要，首先调用了add，然后设置arguments</p><h2 id="Fragment的startActivityForResult"><a href="#Fragment的startActivityForResult" class="headerlink" title="Fragment的startActivityForResult"></a>Fragment的startActivityForResult</h2><p>在Fragment中存在startActivityForResult（）以及onActivityResult（）方法，但是呢，没有setResult（）方法，用于设置返回的intent，这样我们就需要通过调用getActivity().setResult(ListTitleFragment.REQUEST_DETAIL, intent);</p><h2 id="SingleFragmentActivity"><a href="#SingleFragmentActivity" class="headerlink" title="SingleFragmentActivity"></a>SingleFragmentActivity</h2><p>抽象BaseFragmentActivigty类： SingleFragmentActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleFragmentActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Fragment <span class="title">createFragment</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_single_fragment);</span><br><span class="line"></span><br><span class="line">FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">Fragment fragment =fm.findFragmentById(R.id.id_fragment_container);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fragment == <span class="keyword">null</span> )</span><br><span class="line">&#123;</span><br><span class="line">fragment = createFragment() ;</span><br><span class="line"></span><br><span class="line">fm.beginTransaction().add(R.id.id_fragment_container,fragment).commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>activity_single_fragment.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/id_fragment_container"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ContentActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentActivity</span> <span class="keyword">extends</span> <span class="title">SingleFragmentActivity</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ContentFragment mContentFragment;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Fragment <span class="title">createFragment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String title = getIntent().getStringExtra(ContentFragment.ARGUMENT);</span><br><span class="line"> </span><br><span class="line">mContentFragment = ContentFragment.newInstance(title);</span><br><span class="line"><span class="keyword">return</span> mContentFragment;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ContentFragment.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> String mArgument;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARGUMENT = <span class="string">"argument"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESPONSE = <span class="string">"response"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">Bundle bundle = getArguments();</span><br><span class="line"><span class="keyword">if</span> (bundle != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">mArgument = bundle.getString(ARGUMENT);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.putExtra(RESPONSE, <span class="string">"good"</span>);</span><br><span class="line">getActivity().setResult(ListTitleFragment.REQUEST_DETAIL, intent);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ContentFragment <span class="title">newInstance</span><span class="params">(String argument)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(ARGUMENT, argument);</span><br><span class="line">ContentFragment contentFragment = <span class="keyword">new</span> ContentFragment();</span><br><span class="line">contentFragment.setArguments(bundle);</span><br><span class="line"><span class="keyword">return</span> contentFragment;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">TextView tv = <span class="keyword">new</span> TextView(getActivity());</span><br><span class="line">tv.setText(mArgument);</span><br><span class="line">tv.setGravity(Gravity.CENTER);</span><br><span class="line">tv.setBackgroundColor(Color.argb(random.nextInt(<span class="number">100</span>),</span><br><span class="line">random.nextInt(<span class="number">255</span>), random.nextInt(<span class="number">255</span>), random.nextInt(<span class="number">255</span>)));</span><br><span class="line"><span class="keyword">return</span> tv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FragmentPagerAdapter与FragmentStatePagerAdapter"><a href="#FragmentPagerAdapter与FragmentStatePagerAdapter" class="headerlink" title="FragmentPagerAdapter与FragmentStatePagerAdapter"></a>FragmentPagerAdapter与FragmentStatePagerAdapter</h2><p>FragmentPagerAdapter：对于不再需要的fragment，选择调用detach方法，仅销毁视图，并不会销毁fragment实例。</p><p>FragmentStatePagerAdapter：会销毁不再需要的fragment，当当前事务提交以后，会彻底的将fragmeng从当前Activity的FragmentManager中移除，state标明，销毁时，会将其onSaveInstanceState(Bundle outState)中的bundle信息保存下来，当用户切换回来，可以通过该bundle恢复生成新的fragment，也就是说，你可以在onSaveInstanceState(Bundle outState)方法中保存一些数据，在onCreate中进行恢复创建。</p><h2 id="Fragment间的数据传递"><a href="#Fragment间的数据传递" class="headerlink" title="Fragment间的数据传递"></a>Fragment间的数据传递</h2><p>情况：两个Fragment在同一个Activity中：例如，点击当前Fragment中按钮，弹出一个对话框（DialogFragment），在对话框中的操作需要返回给触发的Fragment中</p><p>ContentFragment.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开 DialogFragment</span></span><br><span class="line">tv.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        EvaluateDialog dialog = <span class="keyword">new</span> EvaluateDialog();</span><br><span class="line">        <span class="comment">//注意setTargetFragment</span></span><br><span class="line">        dialog.setTargetFragment(ContentFragment.<span class="keyword">this</span>, REQUEST_EVALUATE);</span><br><span class="line">        dialog.show(getSupportFragmentManager(), EVALUATE_DIALOG);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收返回回来的数据</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_EVALUATE)</span><br><span class="line">    &#123;</span><br><span class="line">        String evaluate = data</span><br><span class="line">                .getStringExtra(EvaluateDialog.RESPONSE_EVALUATE);</span><br><span class="line">        Toast.makeText(getActivity(), evaluate, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(RESPONSE, evaluate);</span><br><span class="line">        getActivity().setResult(Activity.REQUEST_OK, intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EvaluateDialog.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置返回数据</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(<span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否设置了targetFragment</span></span><br><span class="line">    <span class="keyword">if</span> (getTargetFragment() == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(RESPONSE_EVALUATE, mEvaluteVals[which]);</span><br><span class="line">    getTargetFragment().onActivityResult(ContentFragment.REQUEST_EVALUATE,</span><br><span class="line">            Activity.RESULT_OK, intent);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Fragment-详解&quot;&gt;&lt;a href=&quot;#Fragment-详解&quot; class=&quot;headerlink&quot; title=&quot;Fragment 详解&quot;&gt;&lt;/a&gt;Fragment 详解&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Fragment(碎片)功能，它非常类似于Activity，可以像Activity一样包含布局，Fragment通常是嵌套在Activity中使用的。&lt;br&gt;Activity一方面需要在布局中为Fragment安排位置，另一方面需要管理好Fragment的生命周期。Activity中有个FragmentManager，其内部维护fragment队列，以及fragment事务的回退栈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Fragment" scheme="http://yoursite.com/tags/Fragment/"/>
    
      <category term="DialogFragment" scheme="http://yoursite.com/tags/DialogFragment/"/>
    
  </entry>
  
  <entry>
    <title>NavigationBar 分析</title>
    <link href="http://yoursite.com/2019/02/24/aosp-NavigationBar-%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/02/24/aosp-NavigationBar-分析/</id>
    <published>2019-02-24T15:15:10.000Z</published>
    <updated>2019-02-26T12:34:09.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NavigationBar-分析"><a href="#NavigationBar-分析" class="headerlink" title="NavigationBar 分析"></a>NavigationBar 分析</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Android手机可分为有导航栏以及没导航栏两种，一般有物理按键的机器不会带有导航栏，而没有物理按键的机器则基本会带。这里主要是分析导航栏导航栏的加载以及按键实现。</p><a id="more"></a><h2 id="导航栏的加载以及按键实现"><a href="#导航栏的加载以及按键实现" class="headerlink" title="导航栏的加载以及按键实现"></a>导航栏的加载以及按键实现</h2><p>导航栏是属于系统界面的一部分，也就是SystemUI的一部分。</p><p>StatusBar.java：</p><p>makeStatusBarView():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> showNav = mWindowManagerService.hasNavigationBar();</span><br><span class="line"><span class="keyword">if</span> (showNav) &#123;</span><br><span class="line">    createNavigationBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createNavigationBar():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mNavigationBarView = NavigationBarFragment.create(mContext, (tag, fragment) -&gt; &#123;</span><br><span class="line">            mNavigationBar = (NavigationBarFragment) fragment;</span><br><span class="line">            <span class="keyword">if</span> (mLightBarController != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mNavigationBar.setLightBarController(mLightBarController);</span><br><span class="line">            &#125;</span><br><span class="line">            mNavigationBar.setCurrentSysuiVisibility(mSystemUiVisibility);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>NavigationBarFragment.java:</p><p>onCreate():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inflater.inflate(R.layout.navigation_bar, container, <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><p>navigation_bar.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.android.systemui.statusbar.phone.NavigationBarView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:systemui</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/system_bar_background"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.android.systemui.statusbar.phone.NavigationBarInflaterView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_inflater"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.android.systemui.statusbar.phone.NavigationBarView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>NavigationBarView.java: // mRecentIcon</p><p>onFinishInflate():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mNavigationInflaterView = (NavigationBarInflaterView) findViewById(</span><br><span class="line">                R.id.navigation_inflater);</span><br></pre></td></tr></table></figure><p>NavigationBarInflaterView.java:</p><p>onFinishInflate():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inflateLayout(getDefaultLayout());</span><br></pre></td></tr></table></figure><p>inflateButtons():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buttons.length; i++) &#123;</span><br><span class="line">    inflateButton(buttons[i], parent, landscape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>inflateButton():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View v = createView(buttonSpec, parent, inflater, landscape);</span><br></pre></td></tr></table></figure><p>createView():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (HOME.equals(button)) &#123;</span><br><span class="line">    v = inflater.inflate(R.layout.home, parent, <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BACK.equals(button)) &#123;</span><br><span class="line">    v = inflater.inflate(R.layout.back, parent, <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (RECENT.equals(button)) &#123;</span><br><span class="line">    v = inflater.inflate(R.layout.recent_apps, parent, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>home.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.android.systemui.statusbar.policy.KeyButtonView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:systemui</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/home"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"@dimen/navigation_key_width"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">systemui:keyCode</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:scaleType</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:contentDescription</span>=<span class="string">"@string/accessibility_home"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">"@dimen/navigation_key_padding"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingEnd</span>=<span class="string">"@dimen/navigation_key_padding"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>KeyButtonView.java:</p><p>KeyButtonView():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id为home以及id为back的KeyButtonView就分别通过systemui:keyCode属性对其进行了设置，设置的值分别是3和4</span></span><br><span class="line">mCode = a.getInteger(R.styleable.KeyButtonView_keyCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>onTouchEvent():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当mCode为0的时候，KeyButtonView并不会调用sendEvent方法</span></span><br><span class="line"><span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">        mDownTime = SystemClock.uptimeMillis();</span><br><span class="line">        mLongClicked = <span class="keyword">false</span>;</span><br><span class="line">        setPressed(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (mCode != <span class="number">0</span>) &#123;</span><br><span class="line">            sendEvent(KeyEvent.ACTION_DOWN, <span class="number">0</span>, mDownTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Provide the same haptic feedback that the system offers for virtual keys.</span></span><br><span class="line">            performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">        setPressed(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (mCode != <span class="number">0</span>) &#123;</span><br><span class="line">            sendEvent(KeyEvent.ACTION_UP, KeyEvent.FLAG_CANCELED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">        <span class="keyword">if</span> (mCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (doIt) &#123;</span><br><span class="line">                sendEvent(KeyEvent.ACTION_UP, <span class="number">0</span>);</span><br><span class="line">                sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sendEvent(KeyEvent.ACTION_UP, KeyEvent.FLAG_CANCELED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// no key code, just a regular ImageView</span></span><br><span class="line">            <span class="keyword">if</span> (doIt &amp;&amp; mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mOnClickListener.onClick(<span class="keyword">this</span>);</span><br><span class="line">                sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sendEvent():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mMetricsLogger.write(<span class="keyword">new</span> LogMaker(MetricsEvent.ACTION_NAV_BUTTON_EVENT)</span><br><span class="line">        .setType(MetricsEvent.TYPE_ACTION)</span><br><span class="line">        .setSubtype(mCode)</span><br><span class="line">        .addTaggedData(MetricsEvent.FIELD_NAV_ACTION, action)</span><br><span class="line">        .addTaggedData(MetricsEvent.FIELD_FLAGS, flags));</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> repeatCount = (flags &amp; KeyEvent.FLAG_LONG_PRESS) != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> KeyEvent ev = <span class="keyword">new</span> KeyEvent(mDownTime, when, action, mCode, repeatCount,</span><br><span class="line">        <span class="number">0</span>, KeyCharacterMap.VIRTUAL_KEYBOARD, <span class="number">0</span>,</span><br><span class="line">        flags | KeyEvent.FLAG_FROM_SYSTEM | KeyEvent.FLAG_VIRTUAL_HARD_KEY,</span><br><span class="line">        InputDevice.SOURCE_KEYBOARD);</span><br><span class="line"><span class="comment">// 构建出一个对应的keyCode的KeyEvent ev，然后调用InputManager的injectInputEvent模拟发送来实现与物理按键相同的功能</span></span><br><span class="line">InputManager.getInstance().injectInputEvent(ev,</span><br><span class="line">        InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);</span><br></pre></td></tr></table></figure><p>NavigationBarFragment.java:</p><p>onViewCreated():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepareNavigationBarView();</span><br></pre></td></tr></table></figure><p>prepareNavigationBarView():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ButtonDispatcher recentsButton = mNavigationBarView.getRecentsButton();</span><br><span class="line">recentsButton.setOnClickListener(<span class="keyword">this</span>::onRecentsClick);</span><br></pre></td></tr></table></figure><p>onRecentsClick():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onRecentsClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    mStatusBar.awakenDreams();</span><br><span class="line">    mCommandQueue.toggleRecentApps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="App实现隐藏导航栏-沉浸式"><a href="#App实现隐藏导航栏-沉浸式" class="headerlink" title="App实现隐藏导航栏(沉浸式)"></a>App实现隐藏导航栏(沉浸式)</h2><p>MainActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onWindowFocusChanged(hasFocus);</span><br><span class="line">    <span class="keyword">if</span> (hasFocus) &#123;</span><br><span class="line">        View decorView = getWindow().getDecorView();</span><br><span class="line">        decorView.setSystemUiVisibility(</span><br><span class="line">                View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NavigationBar-分析&quot;&gt;&lt;a href=&quot;#NavigationBar-分析&quot; class=&quot;headerlink&quot; title=&quot;NavigationBar 分析&quot;&gt;&lt;/a&gt;NavigationBar 分析&lt;/h1&gt;&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;Android手机可分为有导航栏以及没导航栏两种，一般有物理按键的机器不会带有导航栏，而没有物理按键的机器则基本会带。这里主要是分析导航栏导航栏的加载以及按键实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android源码" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="NavigationBar" scheme="http://yoursite.com/tags/NavigationBar/"/>
    
  </entry>
  
  <entry>
    <title>BroadcastReceiver 静态注册与动态注册</title>
    <link href="http://yoursite.com/2019/02/21/BroadcastReceiver-%E9%9D%99%E6%80%81%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/"/>
    <id>http://yoursite.com/2019/02/21/BroadcastReceiver-静态注册与动态注册/</id>
    <published>2019-02-21T13:51:51.000Z</published>
    <updated>2019-02-27T14:13:38.260Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章提到了 使用自定义uri用于外部启动 app，而我们也可以使用广播来启动外部app，这篇文章简单的介绍下android广播的使用。</p><h1 id="BroadcastReceiver-静态注册与动态注册"><a href="#BroadcastReceiver-静态注册与动态注册" class="headerlink" title="BroadcastReceiver 静态注册与动态注册"></a>BroadcastReceiver 静态注册与动态注册</h1><h2 id="接收广播"><a href="#接收广播" class="headerlink" title="接收广播"></a>接收广播</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  UI 线程，不建议过多操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注：启动Activity在这些类中是可以的，但是需要创建一个新的task。一般情况不推荐, 见Context 干货：(https://www.jianshu.com/p/881acfafd18d)</span></span><br><span class="line">        <span class="comment">// activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".MyReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"music"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    IntentFilter filter=<span class="keyword">new</span> IntentFilter(<span class="string">"music"</span>);</span><br><span class="line">    mBroadcast =<span class="keyword">new</span> MyReceiver();</span><br><span class="line">    registerReceiver(mBroadcast,filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    unregisterReceiver(mBroadcast);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"music"</span>);</span><br><span class="line"><span class="comment">// 8.0后，静态注册广播接收者时，需 setComponent()</span></span><br><span class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.example.pvwav.broadcastreceiver"</span>, <span class="string">"com.example.pvwav.broadcastreceiver.MyReceiver"</span>));</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章提到了 使用自定义uri用于外部启动 app，而我们也可以使用广播来启动外部app，这篇文章简单的介绍下android广播的使用。&lt;/p&gt;
&lt;h1 id=&quot;BroadcastReceiver-静态注册与动态注册&quot;&gt;&lt;a href=&quot;#BroadcastReceive
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="BroadcastReceiver" scheme="http://yoursite.com/tags/BroadcastReceiver/"/>
    
  </entry>
  
  <entry>
    <title>自定义Uri用于外部启动 app</title>
    <link href="http://yoursite.com/2019/02/20/%E8%87%AA%E5%AE%9A%E4%B9%89Uri%E7%94%A8%E4%BA%8E%E5%A4%96%E9%83%A8%E5%90%AF%E5%8A%A8-app/"/>
    <id>http://yoursite.com/2019/02/20/自定义Uri用于外部启动-app/</id>
    <published>2019-02-20T14:12:33.000Z</published>
    <updated>2019-03-20T15:42:51.034Z</updated>
    
    <content type="html"><![CDATA[<p>项目有个需求，通过语音打开相应的app，例如我说：“去新街口”，就打开高德地图。讯飞语音demo中就有这样的例子，而它就是通过uir实现的。所以在这儿对该实现做了个总结，以便随时之需。</p><a id="more"></a><h1 id="自定义Uri用于外部启动-app"><a href="#自定义Uri用于外部启动-app" class="headerlink" title="自定义Uri用于外部启动 app"></a>自定义Uri用于外部启动 app</h1><h2 id="新建用于外部启动的Activity"><a href="#新建用于外部启动的Activity" class="headerlink" title="新建用于外部启动的Activity"></a>新建用于外部启动的Activity</h2><p>应用 A：SchemeURL<br>activity: SecondActivity</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name=<span class="string">".SecondActivity"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">"android.jackie.schemeurl.activity"</span> /&gt;</span><br><span class="line">        &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><br><span class="line">        &lt;data</span><br><span class="line">            android:scheme=<span class="string">"jackie"</span></span><br><span class="line">            android:host=<span class="string">"test.uri.activity"</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><h2 id="新建启动外部应用的应用"><a href="#新建启动外部应用的应用" class="headerlink" title="新建启动外部应用的应用"></a>新建启动外部应用的应用</h2><p>应用 B：StartSchemeURL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(<span class="string">"jackie://test.uri.activity?action=123"</span>); <span class="comment">// action 为传递的数据</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.jackie.schemeurl.activity"</span>);</span><br><span class="line">intent.setData(uri);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h2 id="通过Uri来传递参数"><a href="#通过Uri来传递参数" class="headerlink" title="通过Uri来传递参数"></a>通过Uri来传递参数</h2><p>应用 A：SchemeURL<br>activity: SecondActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != intent) &#123;</span><br><span class="line">    Uri uri = intent.getData();</span><br><span class="line">    <span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String acionData = uri.getQueryParameter(<span class="string">"action"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目有个需求，通过语音打开相应的app，例如我说：“去新街口”，就打开高德地图。讯飞语音demo中就有这样的例子，而它就是通过uir实现的。所以在这儿对该实现做了个总结，以便随时之需。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="uri" scheme="http://yoursite.com/tags/uri/"/>
    
  </entry>
  
  <entry>
    <title>链式存储结构与顺序存储结构的区别</title>
    <link href="http://yoursite.com/2019/02/18/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/02/18/链式存储结构与顺序存储结构的区别/</id>
    <published>2019-02-18T13:54:42.000Z</published>
    <updated>2019-02-18T13:56:08.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链式存储结构与顺序存储结构的区别"><a href="#链式存储结构与顺序存储结构的区别" class="headerlink" title="链式存储结构与顺序存储结构的区别"></a>链式存储结构与顺序存储结构的区别</h1><p>链式存储适用于在较频繁地插入、删除、更新元素，<br>顺序存储结构适用于频繁查询时使用。</p><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>链表存储结构的内存地址不一定是连续的，<br>顺序存储结构的内存地址一定是连续的。</p><h2 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h2><p>链式结构每一个节点都有一个指针存储域，所以顺序比链式节约空间，存储空间利用率高。</p><h2 id="插入和删除上"><a href="#插入和删除上" class="headerlink" title="插入和删除上"></a>插入和删除上</h2><p>链式的要比顺序的方便（因为插入的话顺序表也很方便，问题是顺序表的插入要执行更大的空间复杂度，包括一个从表头索引以及索引后的元素后移，而链表是索引后，插入就完成了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链式存储结构与顺序存储结构的区别&quot;&gt;&lt;a href=&quot;#链式存储结构与顺序存储结构的区别&quot; class=&quot;headerlink&quot; title=&quot;链式存储结构与顺序存储结构的区别&quot;&gt;&lt;/a&gt;链式存储结构与顺序存储结构的区别&lt;/h1&gt;&lt;p&gt;链式存储适用于在较频繁地插入
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="存储结构" scheme="http://yoursite.com/tags/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 离线更新</title>
    <link href="http://yoursite.com/2019/02/14/Gradle-%E7%A6%BB%E7%BA%BF%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2019/02/14/Gradle-离线更新/</id>
    <published>2019-02-14T14:13:29.000Z</published>
    <updated>2019-02-17T08:14:49.941Z</updated>
    
    <content type="html"><![CDATA[<p>遇到下载的项目，Android studio 一直无法下载成功对应的 gradle 版本，所以选择手动下载 gradle 对应的 zip 文件。</p><ol><li>先到 <a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">Gradle 官网</a>下载对应的版本 complete 包（all）到本地。</li></ol><p><img src="/images/gradle_download.png" alt="gradle_download"></p><ol start="2"><li>拷贝 gradle-x.x-all.zip 到该目录下:</li></ol><p><img src="/images/gradle_save_location.png" alt="gradle_save_location"></p><p>注意: 1.如果在dists目录下有该gradle版本的文件夹，则拷贝压缩包到该版本文件夹的随机码路径文件夹下。<br>    : 2.否则自己按照之前的对比新建一个文件夹（例如：gradle-4.6-all），然后重新建一个随机码作为名字的文件夹，将gradle-4.6-all.zip拷贝到该目录下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;遇到下载的项目，Android studio 一直无法下载成功对应的 gradle 版本，所以选择手动下载 gradle 对应的 zip 文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先到 &lt;a href=&quot;http://services.gradle.org/distribution
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
</feed>
